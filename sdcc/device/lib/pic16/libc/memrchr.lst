gpasm-0.14.1 (Aug 18 2017)   memrchr.asm        8-18-2017  19:22:10          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;--------------------------------------------------------
                      00002 ; File Created by SDCC : free open source ANSI-C Compiler
                      00003 ; Version 3.2.0 #8004 (Aug 18 2017) (MINGW32)
                      00004 ; This file was generated Fri Aug 18 19:22:10 2017
                      00005 ;--------------------------------------------------------
                      00006 ; PIC16 port for the Microchip 16-bit core micros
                      00007 ;--------------------------------------------------------
                      00008         list    p=18f452
                      00009 
                      00010         radix dec
                      00011 
                      00012 ;--------------------------------------------------------
                      00013 ; public variables in this module
                      00014 ;--------------------------------------------------------
                      00015         global  _memrchr
                      00016 
                      00017 ;--------------------------------------------------------
                      00018 ; extern variables in this module
                      00019 ;--------------------------------------------------------
                      00020         extern  __gptrget1
                      00021         extern  __mulint
                      00022 
                      00023 ;--------------------------------------------------------
                      00024 ;       Equates to used internal registers
                      00025 ;--------------------------------------------------------
  00000FD8            00026 STATUS  equ     0xfd8
  00000FE8            00027 WREG    equ     0xfe8
  00000FE9            00028 FSR0L   equ     0xfe9
  00000FE1            00029 FSR1L   equ     0xfe1
  00000FD9            00030 FSR2L   equ     0xfd9
  00000FE5            00031 POSTDEC1        equ     0xfe5
  00000FE4            00032 PREINC1 equ     0xfe4
  00000FDB            00033 PLUSW2  equ     0xfdb
  00000FF3            00034 PRODL   equ     0xff3
  00000FF4            00035 PRODH   equ     0xff4
                      00036 
                      00037 
                      00038 ; Internal registers
                      00039 .registers      udata_ovr       0x0000
000000                00040 r0x00   res     1
000001                00041 r0x01   res     1
000002                00042 r0x02   res     1
000003                00043 r0x03   res     1
000004                00044 r0x04   res     1
000005                00045 r0x05   res     1
000006                00046 r0x06   res     1
000007                00047 r0x07   res     1
000008                00048 r0x08   res     1
000009                00049 r0x09   res     1
00000A                00050 r0x0a   res     1
                      00051 
                      00052 ;--------------------------------------------------------
                      00053 ; global & static initialisations
gpasm-0.14.1 (Aug 18 2017)   memrchr.asm        8-18-2017  19:22:10          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ;--------------------------------------------------------
                      00055 ; I code from now on!
                      00056 ; ; Starting pCode block
                      00057 ; ;ic:1:  _entry($11) :
                      00058 ; ;ic:2:        proc _memrchr [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, char fixed, unsigned-int fixed) fixed}
                      00059 S_memrchr__memrchr      code
000000                00060 _memrchr:
                      00061 ;       .line   33; string/memrchr.c    memrchr (void *s, char c, size_t count)
000000 CFD9 FFE5      00062         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00063         MOVFF   FSR1L, FSR2L
000008 C000 FFE5      00064         MOVFF   r0x00, POSTDEC1
00000C C000 FFE5      00065         MOVFF   r0x01, POSTDEC1
000010 C000 FFE5      00066         MOVFF   r0x02, POSTDEC1
000014 C000 FFE5      00067         MOVFF   r0x03, POSTDEC1
000018 C000 FFE5      00068         MOVFF   r0x04, POSTDEC1
00001C C000 FFE5      00069         MOVFF   r0x05, POSTDEC1
000020 C000 FFE5      00070         MOVFF   r0x06, POSTDEC1
000024 C000 FFE5      00071         MOVFF   r0x07, POSTDEC1
000028 C000 FFE5      00072         MOVFF   r0x08, POSTDEC1
00002C C000 FFE5      00073         MOVFF   r0x09, POSTDEC1
000030 C000 FFE5      00074         MOVFF   r0x0a, POSTDEC1
                      00075 ; ;ic:3: iTemp0 [k2 lr3:29 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void generic* fixed}{ sir@ _memrchr_s_1_28}[r0x00 r0x01 r0x02 ] = recv _memrchr [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, char fixed, unsigned-int fixed) fixed}
000034 0E02           00076         MOVLW   0x02
000036 CFDB F000      00077         MOVFF   PLUSW2, r0x00
00003A 0E03           00078         MOVLW   0x03
00003C CFDB F000      00079         MOVFF   PLUSW2, r0x01
000040 0E04           00080         MOVLW   0x04
000042 CFDB F000      00081         MOVFF   PLUSW2, r0x02
                      00082 ; ;ic:4: iTemp1 [k4 lr4:26 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _memrchr_c_1_28}[r0x03 ] = recv _memrchr [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, char fixed, unsigned-int fixed) fixed}
000046 0E05           00083         MOVLW   0x05
000048 CFDB F000      00084         MOVFF   PLUSW2, r0x03
                      00085 ; ;ic:5: iTemp2 [k6 lr5:15 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-int fixed}{ sir@ _memrchr_count_1_28}[r0x04 r0x05 ] = recv _memrchr [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, char fixed, unsigned-int fixed) fixed}
00004C 0E06           00086         MOVLW   0x06
00004E CFDB F000      00087         MOVFF   PLUSW2, r0x04
000052 0E07           00088         MOVLW   0x07
000054 CFDB F000      00089         MOVFF   PLUSW2, r0x05
                      00090 ; ;ic:6:        if iTemp2 [k6 lr5:15 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-int fixed}{ sir@ _memrchr_count_1_28}[r0x04 r0x05 ] != 0 goto _iffalse_0($2)
                      00091 ;       .line   35; string/memrchr.c    if (!count)
000058 5000           00092         MOVF    r0x04, W
00005A 1000           00093         IORWF   r0x05, W
00005C E100           00094         BNZ     _00106_DS_
                      00095 ; ;ic:7:        ret 0x0 {void generic* literal}
                      00096 ;       .line   36; string/memrchr.c    return NULL;
00005E 6AF4           00097         CLRF    PRODH
000060 6AF3           00098         CLRF    PRODL
000062 6AE8           00099         CLRF    WREG
000064 D000           00100         BRA     _00114_DS_
                      00101 ; ;ic:8:  _iffalse_0($2) :
                      00102 ; ;ic:9:        iTemp3 [k8 lr9:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x06 r0x07 r0x08 ] = (char generic* fixed)iTemp0 [k2 lr3:29 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void generic* fixed}{ sir@ _memrchr_s_1_28}[r0x00 r0x01 r0x02 ]
000066                00103 _00106_DS_:
                      00104 ;       .line   38; string/memrchr.c    s = (char *)s + sizeof (char *) * count;
000066 5000           00105         MOVF    r0x02, W
000068 6E00           00106         MOVWF   r0x08
gpasm-0.14.1 (Aug 18 2017)   memrchr.asm        8-18-2017  19:22:10          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00006A 5000           00107         MOVF    r0x01, W
00006C 6E00           00108         MOVWF   r0x07
00006E 5000           00109         MOVF    r0x00, W
000070 6E00           00110         MOVWF   r0x06
                      00111 ; ;ic:10:       send 0x3 {unsigned-int literal}{argreg = 1}
                      00112 ; ;ic:11:       send iTemp2 [k6 lr5:15 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-int fixed}{ sir@ _memrchr_count_1_28}[r0x04 r0x05 ]{argreg = 2}
                      00113 ; ;ic:12:       iTemp4 [k9 lr12:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x09 r0x0a ] = call __mulint [k19 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int function ( int fixed, int fixed) fixed}
000072 5000           00114         MOVF    r0x05, W
000074 6EE5           00115         MOVWF   POSTDEC1
000076 5000           00116         MOVF    r0x04, W
000078 6EE5           00117         MOVWF   POSTDEC1
00007A 6AE5           00118         CLRF    POSTDEC1
00007C 0E03           00119         MOVLW   0x03
00007E 6EE5           00120         MOVWF   POSTDEC1
000080 EC00 F000      00121         CALL    __mulint
000084 6E00           00122         MOVWF   r0x09
000086 CFF3 F000      00123         MOVFF   PRODL, r0x0a
00008A 0E04           00124         MOVLW   0x04
00008C 26E1           00125         ADDWF   FSR1L, F
                      00126 ; ;ic:13:       iTemp5 [k10 lr13:14 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x06 r0x07 r0x08 ] = iTemp3 [k8 lr9:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x06 r0x07 r0x08 ] + iTemp4 [k9 lr12:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x09 r0x0a ]
00008E 5000           00127         MOVF    r0x09, W
000090 2600           00128         ADDWF   r0x06, F
000092 5000           00129         MOVF    r0x0a, W
000094 2200           00130         ADDWFC  r0x07, F
000096 6AE8           00131         CLRF    WREG
000098 2200           00132         ADDWFC  r0x08, F
                      00133 ; ;ic:14:       iTemp0 [k2 lr3:29 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void generic* fixed}{ sir@ _memrchr_s_1_28}[r0x00 r0x01 r0x02 ] = (void generic* fixed)iTemp5 [k10 lr13:14 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x06 r0x07 r0x08 ]
00009A 5000           00134         MOVF    r0x08, W
00009C 6E00           00135         MOVWF   r0x02
00009E 5000           00136         MOVF    r0x07, W
0000A0 6E00           00137         MOVWF   r0x01
0000A2 5000           00138         MOVF    r0x06, W
0000A4 6E00           00139         MOVWF   r0x00
                      00140 ; ;ic:15:       iTemp13 [k18 lr15:28 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x04 r0x05 ] := iTemp2 [k6 lr5:15 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-int fixed}{ sir@ _memrchr_count_1_28}[r0x04 r0x05 ]
                      00141 ; ;ic:17:  _whilecontinue_0($4) :
                      00142 ; ;ic:18:       iTemp7 [k12 lr18:23 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x06 r0x07 r0x08 ] = (char generic* fixed)iTemp0 [k2 lr3:29 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void generic* fixed}{ sir@ _memrchr_s_1_28}[r0x00 r0x01 r0x02 ]
0000A6                00143 _00108_DS_:
                      00144 ;       .line   40; string/memrchr.c    while (*(char *)s != c && count)
0000A6 5000           00145         MOVF    r0x02, W
0000A8 6E00           00146         MOVWF   r0x08
0000AA 5000           00147         MOVF    r0x01, W
0000AC 6E00           00148         MOVWF   r0x07
0000AE 5000           00149         MOVF    r0x00, W
0000B0 6E00           00150         MOVWF   r0x06
                      00151 ; ;ic:19:       iTemp8 [k13 lr19:20 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x09 ] = @[iTemp7 [k12 lr18:23 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x06 r0x07 r0x08 ] + 0x0 {const-unsigned-char literal}]
0000B2 C000 FFE9      00152         MOVFF   r0x06, FSR0L
0000B6 C000 FFF3      00153         MOVFF   r0x07, PRODL
0000BA 5000           00154         MOVF    r0x08, W
0000BC EC00 F000      00155         CALL    __gptrget1
                      00156 ; #     MOVWF   r0x09
                      00157 ; #;;ic:20:     iTemp9 [k14 lr20:21 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp8 [k13 lr19:20 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x09 ] == iTemp1 [k4 lr4:26 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _memrchr_c_1_28}[r0x03 ]
                      00158 ; #     MOVF    r0x09, W
0000C0 1800           00159         XORWF   r0x03, W
gpasm-0.14.1 (Aug 18 2017)   memrchr.asm        8-18-2017  19:22:10          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000C2 E000           00160         BZ      _00110_DS_
                      00161 ; ;ic:21:       if iTemp9 [k14 lr20:21 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} != 0 goto _whilebreak_0($6)
                      00162 ; ;ic:22:       if iTemp13 [k18 lr15:28 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x04 r0x05 ] == 0 goto _whilebreak_0($6)
0000C4 5000           00163         MOVF    r0x04, W
0000C6 1000           00164         IORWF   r0x05, W
0000C8 E000           00165         BZ      _00110_DS_
                      00166 ; ;ic:23:       iTemp11 [k16 lr23:24 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x06 r0x07 r0x08 ] = iTemp7 [k12 lr18:23 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x06 r0x07 r0x08 ] - 0x3 {unsigned-char literal}
                      00167 ;       .line   42; string/memrchr.c    s = (char *)s - sizeof(char *);
0000CA 0EFD           00168         MOVLW   0xfd
0000CC 2600           00169         ADDWF   r0x06, F
0000CE 0EFF           00170         MOVLW   0xff
0000D0 2200           00171         ADDWFC  r0x07, F
0000D2 2200           00172         ADDWFC  r0x08, F
                      00173 ; ;ic:24:       iTemp0 [k2 lr3:29 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void generic* fixed}{ sir@ _memrchr_s_1_28}[r0x00 r0x01 r0x02 ] = (void generic* fixed)iTemp11 [k16 lr23:24 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x06 r0x07 r0x08 ]
0000D4 5000           00174         MOVF    r0x08, W
0000D6 6E00           00175         MOVWF   r0x02
0000D8 5000           00176         MOVF    r0x07, W
0000DA 6E00           00177         MOVWF   r0x01
0000DC 5000           00178         MOVF    r0x06, W
0000DE 6E00           00179         MOVWF   r0x00
                      00180 ; ;ic:25:       iTemp13 [k18 lr15:28 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x04 r0x05 ] = iTemp13 [k18 lr15:28 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x04 r0x05 ] - 0x1 {const-unsigned-char literal}
                      00181 ;       .line   43; string/memrchr.c    --count;
0000E0 0EFF           00182         MOVLW   0xff
0000E2 2600           00183         ADDWF   r0x04, F
0000E4 2200           00184         ADDWFC  r0x05, F
                      00185 ; ;ic:26:        goto _whilecontinue_0($4)
0000E6 D000           00186         BRA     _00108_DS_
                      00187 ; ;ic:27:  _whilebreak_0($6) :
                      00188 ; ;ic:28:       if iTemp13 [k18 lr15:28 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x04 r0x05 ] == 0 goto _iffalse_1($8)
0000E8                00189 _00110_DS_:
                      00190 ;       .line   46; string/memrchr.c    if (count)
0000E8 5000           00191         MOVF    r0x04, W
0000EA 1000           00192         IORWF   r0x05, W
0000EC E000           00193         BZ      _00112_DS_
                      00194 ; ;ic:29:       ret iTemp0 [k2 lr3:29 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void generic* fixed}{ sir@ _memrchr_s_1_28}[r0x00 r0x01 r0x02 ]
                      00195 ;       .line   47; string/memrchr.c    return s;
0000EE C000 FFF4      00196         MOVFF   r0x02, PRODH
0000F2 C000 FFF3      00197         MOVFF   r0x01, PRODL
0000F6 5000           00198         MOVF    r0x00, W
0000F8 D000           00199         BRA     _00114_DS_
                      00200 ; ;ic:30:  _iffalse_1($8) :
                      00201 ; ;ic:31:       ret 0x0 {void generic* literal}
0000FA                00202 _00112_DS_:
                      00203 ;       .line   49; string/memrchr.c    return NULL;
0000FA 6AF4           00204         CLRF    PRODH
0000FC 6AF3           00205         CLRF    PRODL
0000FE 6AE8           00206         CLRF    WREG
                      00207 ; ;ic:32:  _return($10) :
                      00208 ; ;ic:33:       eproc _memrchr [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, char fixed, unsigned-int fixed) fixed}
000100                00209 _00114_DS_:
000100 CFE4 F000      00210         MOVFF   PREINC1, r0x0a
000104 CFE4 F000      00211         MOVFF   PREINC1, r0x09
000108 CFE4 F000      00212         MOVFF   PREINC1, r0x08
gpasm-0.14.1 (Aug 18 2017)   memrchr.asm        8-18-2017  19:22:10          PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00010C CFE4 F000      00213         MOVFF   PREINC1, r0x07
000110 CFE4 F000      00214         MOVFF   PREINC1, r0x06
000114 CFE4 F000      00215         MOVFF   PREINC1, r0x05
000118 CFE4 F000      00216         MOVFF   PREINC1, r0x04
00011C CFE4 F000      00217         MOVFF   PREINC1, r0x03
000120 CFE4 F000      00218         MOVFF   PREINC1, r0x02
000124 CFE4 F000      00219         MOVFF   PREINC1, r0x01
000128 CFE4 F000      00220         MOVFF   PREINC1, r0x00
00012C CFE4 FFD9      00221         MOVFF   PREINC1, FSR2L
000130 0012           00222         RETURN  
                      00223 
                      00224 
                      00225 
                      00226 ; Statistics:
                      00227 ; code size:      306 (0x0132) bytes ( 0.23%)
                      00228 ;                 153 (0x0099) words
                      00229 ; udata size:       0 (0x0000) bytes ( 0.00%)
                      00230 ; access size:     11 (0x000b) bytes
                      00231 
                      00232 
                      00233         end
gpasm-0.14.1 (Aug 18 2017)   memrchr.asm        8-18-2017  19:22:10          PAGE  6


SYMBOL TABLE
  LABEL                             VALUE

FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00106_DS_                        00000066
_00108_DS_                        000000A6
_00110_DS_                        000000E8
_00112_DS_                        000000FA
_00114_DS_                        00000100
__18F452                          00000001
__gptrget1                        00000000
__mulint                          00000000
_memrchr                          00000000
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009
r0x0a                             0000000A

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

