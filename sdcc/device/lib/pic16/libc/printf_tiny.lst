gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;--------------------------------------------------------
                      00002 ; File Created by SDCC : free open source ANSI-C Compiler
                      00003 ; Version 3.2.0 #8004 (Aug 18 2017) (MINGW32)
                      00004 ; This file was generated Fri Aug 18 19:21:36 2017
                      00005 ;--------------------------------------------------------
                      00006 ; PIC16 port for the Microchip 16-bit core micros
                      00007 ;--------------------------------------------------------
                      00008         list    p=18f452
                      00009 
                      00010         radix dec
                      00011 
                      00012 ;--------------------------------------------------------
                      00013 ; public variables in this module
                      00014 ;--------------------------------------------------------
                      00015         global  _printf_tiny
                      00016 
                      00017 ;--------------------------------------------------------
                      00018 ; extern variables in this module
                      00019 ;--------------------------------------------------------
                      00020         extern  __gptrget1
                      00021         extern  __gptrget3
                      00022         extern  __gptrget4
                      00023         extern  __gptrget2
                      00024         extern  _stdin
                      00025         extern  _stdout
                      00026         extern  _islower
                      00027         extern  _putchar
                      00028         extern  _ultoa
                      00029         extern  _ltoa
                      00030 
                      00031 ;--------------------------------------------------------
                      00032 ;       Equates to used internal registers
                      00033 ;--------------------------------------------------------
  00000FD8            00034 STATUS  equ     0xfd8
  00000FE8            00035 WREG    equ     0xfe8
  00000FE9            00036 FSR0L   equ     0xfe9
  00000FEA            00037 FSR0H   equ     0xfea
  00000FE1            00038 FSR1L   equ     0xfe1
  00000FE2            00039 FSR1H   equ     0xfe2
  00000FD9            00040 FSR2L   equ     0xfd9
  00000FDA            00041 FSR2H   equ     0xfda
  00000FEF            00042 INDF0   equ     0xfef
  00000FE6            00043 POSTINC1        equ     0xfe6
  00000FE5            00044 POSTDEC1        equ     0xfe5
  00000FE4            00045 PREINC1 equ     0xfe4
  00000FE3            00046 PLUSW1  equ     0xfe3
  00000FDB            00047 PLUSW2  equ     0xfdb
  00000FF3            00048 PRODL   equ     0xff3
  00000FF4            00049 PRODH   equ     0xff4
                      00050 
                      00051 
                      00052 ; Internal registers
                      00053 .registers      udata_ovr       0x0000
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000000                00054 r0x00   res     1
000001                00055 r0x01   res     1
000002                00056 r0x02   res     1
000003                00057 r0x03   res     1
000004                00058 r0x04   res     1
000005                00059 r0x05   res     1
000006                00060 r0x06   res     1
000007                00061 r0x07   res     1
000008                00062 r0x08   res     1
000009                00063 r0x09   res     1
00000A                00064 r0x0a   res     1
00000B                00065 r0x0b   res     1
00000C                00066 r0x0c   res     1
00000D                00067 r0x0d   res     1
00000E                00068 r0x0e   res     1
00000F                00069 r0x0f   res     1
000010                00070 r0x10   res     1
000011                00071 r0x11   res     1
000012                00072 r0x12   res     1
                      00073 
                      00074 ;--------------------------------------------------------
                      00075 ; global & static initialisations
                      00076 ;--------------------------------------------------------
                      00077 ; I code from now on!
                      00078 ; ; Starting pCode block
                      00079 ; ;ic:1:  _entry($57) :
                      00080 ; ;ic:2:        proc _printf_tiny [k1 lr0:0 so:13]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void function ( const-char generic* auto) __reentrant fixed}
                      00081 S_printf_tiny__printf_tiny      code
000000                00082 _printf_tiny:
                      00083 ;       .line   87; stdio/printf_tiny.c printf_tiny (const char *fmt, ...)
000000 CFD9 FFE5      00084         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00085         MOVFF   FSR1L, FSR2L
000008 0E0D           00086         MOVLW   0x0d
00000A 5EE1           00087         SUBWF   FSR1L, F
00000C A0D8           00088         BTFSS   STATUS, 0
00000E 06E2           00089         DECF    FSR1H, F
000010 C000 FFE5      00090         MOVFF   r0x00, POSTDEC1
000014 C000 FFE5      00091         MOVFF   r0x01, POSTDEC1
000018 C000 FFE5      00092         MOVFF   r0x02, POSTDEC1
00001C C000 FFE5      00093         MOVFF   r0x03, POSTDEC1
000020 C000 FFE5      00094         MOVFF   r0x04, POSTDEC1
000024 C000 FFE5      00095         MOVFF   r0x05, POSTDEC1
000028 C000 FFE5      00096         MOVFF   r0x06, POSTDEC1
00002C C000 FFE5      00097         MOVFF   r0x07, POSTDEC1
000030 C000 FFE5      00098         MOVFF   r0x08, POSTDEC1
000034 C000 FFE5      00099         MOVFF   r0x09, POSTDEC1
000038 C000 FFE5      00100         MOVFF   r0x0a, POSTDEC1
00003C C000 FFE5      00101         MOVFF   r0x0b, POSTDEC1
000040 C000 FFE5      00102         MOVFF   r0x0c, POSTDEC1
000044 C000 FFE5      00103         MOVFF   r0x0d, POSTDEC1
000048 C000 FFE5      00104         MOVFF   r0x0e, POSTDEC1
00004C C000 FFE5      00105         MOVFF   r0x0f, POSTDEC1
000050 C000 FFE5      00106         MOVFF   r0x10, POSTDEC1
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000054 C000 FFE5      00107         MOVFF   r0x11, POSTDEC1
000058 C000 FFE5      00108         MOVFF   r0x12, POSTDEC1
                      00109 ; ;ic:3:        iTemp1 [k5 lr3:4 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char generic* near* auto}[r0x00 r0x01 ] = &[fmt [k4 lr0:0 so:2]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{const-char generic* auto}]
                      00110 ;       .line   100; stdio/printf_tiny.c        va_start (ap, fmt);
00005C 0E02           00111         MOVLW   0x02
00005E 24D9           00112         ADDWF   FSR2L, W
000060 6E00           00113         MOVWF   r0x00
000062 0E00           00114         MOVLW   0x00
000064 20DA           00115         ADDWFC  FSR2H, W
                      00116 ; #     MOVWF   r0x01
                      00117 ; #;;ic:4:      iTemp2 [k6 lr4:5 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* fixed}[r0x00 r0x01 r0x02 ] = (unsigned-char generic* fixed)iTemp1 [k5 lr3:4 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char generic* near* auto}[r0x00 r0x01 ]
                      00118 ; #     MOVF    r0x01, W
                      00119 ; #     MOVWF   r0x01
                      00120 ; #     MOVWF   r0x01
000066 6E00           00121         MOVWF   r0x01
                      00122 ; #     MOVF    r0x00, W
                      00123 ; #     MOVWF   r0x00
000068 0E80           00124         MOVLW   0x80
00006A 6E00           00125         MOVWF   r0x02
                      00126 ; ;ic:5:        iTemp0 [k2 lr5:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}{ sir@ _printf_tiny_ap_1_41}[r0x00 r0x01 r0x02 ] = iTemp2 [k6 lr4:5 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* fixed}[r0x00 r0x01 r0x02 ] + 0x3 {const-unsigned-char literal}
00006C 0E03           00127         MOVLW   0x03
00006E 2600           00128         ADDWF   r0x00, F
000070 0E00           00129         MOVLW   0x00
000072 2200           00130         ADDWFC  r0x01, F
000074 2200           00131         ADDWFC  r0x02, F
                      00132 ; ;ic:6:        iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] := fmt [k4 lr0:0 so:2]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char generic* auto}
                      00133 ;       .line   101; stdio/printf_tiny.c        ch = fmt;
000076 0E02           00134         MOVLW   0x02
000078 CFDB F000      00135         MOVFF   PLUSW2, r0x03
00007C 0E03           00136         MOVLW   0x03
00007E CFDB F000      00137         MOVFF   PLUSW2, r0x04
000082 0E04           00138         MOVLW   0x04
000084 CFDB F000      00139         MOVFF   PLUSW2, r0x05
                      00140 ; ;ic:7:        iTemp82 [k107 lr7:159 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* fixed}{ sir@ _printf_tiny_str1_1_41}[r0x06 r0x07 ] = &[_printf_tiny_buffer_1_41 [k93 lr0:0 so:-13]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char [13d] auto}]
                      00141 ;       .line   103; stdio/printf_tiny.c        while (*ch) //for (; *fmt ; fmt++ )
000088 0EF4           00142         MOVLW   0xf4
00008A 24D9           00143         ADDWF   FSR2L, W
00008C 6E00           00144         MOVWF   r0x06
00008E 0EFF           00145         MOVLW   0xff
000090 20DA           00146         ADDWFC  FSR2H, W
000092 6E00           00147         MOVWF   r0x07
                      00148 ; ;ic:9:  _whilecontinue_0($53) :
                      00149 ; ;ic:10:       iTemp6 [k11 lr10:155 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x08 ] = @[iTemp4 [k8 lr6:159 so:0]{ ia1 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] + 0x0 {const-unsigned-char literal}]
000094                00150 _00157_DS_:
000094 C000 FFE9      00151         MOVFF   r0x03, FSR0L
000098 C000 FFF3      00152         MOVFF   r0x04, PRODL
00009C 5000           00153         MOVF    r0x05, W
00009E EC00 F000      00154         CALL    __gptrget1
0000A2 6E00           00155         MOVWF   r0x08
                      00156 ; ;ic:11:       if iTemp6 [k11 lr10:155 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x08 ] == 0 goto _return($56)
0000A4 5000           00157         MOVF    r0x08, W
0000A6 B4D8           00158         BTFSC   STATUS, 2
0000A8 D000           00159         BRA     _00160_DS_
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00160 ; ;ic:12:       iTemp9 [k14 lr12:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp6 [k11 lr10:155 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x08 ] == 0x25 {const-char literal}
                      00161 ;       .line   105; stdio/printf_tiny.c        if (*ch == '%')
0000AA 5000           00162         MOVF    r0x08, W
0000AC 0A25           00163         XORLW   0x25
0000AE E000           00164         BZ      _00215_DS_
0000B0 D000           00165         BRA     _00155_DS_
                      00166 ; ;ic:13:       if iTemp9 [k14 lr12:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_16($51)
                      00167 ; ;ic:14:       iTemp10 [k15 lr14:86 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_flong_1_41}[r0x09 ] := 0x0 {const-unsigned-char literal}
0000B2                00168 _00215_DS_:
                      00169 ;       .line   107; stdio/printf_tiny.c        ISLONG = 0;
0000B2 6A00           00170         CLRF    r0x09
                      00171 ; ;ic:15:       iTemp11 [k17 lr15:71 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_fstr_1_41}[r0x0a ] := 0x0 {const-unsigned-char literal}
                      00172 ;       .line   108; stdio/printf_tiny.c        ISSTR = 0;
0000B4 6A00           00173         CLRF    r0x0a
                      00174 ; ;ic:16:       iTemp12 [k19 lr16:94 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_fchar_1_41}[r0x0b ] := 0x0 {const-unsigned-char literal}
                      00175 ;       .line   109; stdio/printf_tiny.c        ISCHAR = 0;
0000B6 6A00           00176         CLRF    r0x0b
                      00177 ; ;ic:17:       iTemp13 [k21 lr17:115 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_nosign_1_41}[r0x0c ] := 0x0 {const-unsigned-char literal}
                      00178 ;       .line   110; stdio/printf_tiny.c        HAVESIGN = 0;
0000B8 6A00           00179         CLRF    r0x0c
                      00180 ; ;ic:18:       iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ] := 0x0 {const-unsigned-char literal}
                      00181 ;       .line   111; stdio/printf_tiny.c        radix = 0;
0000BA 6A00           00182         CLRF    r0x0d
                      00183 ; ;ic:19:       iTemp15 [k25 lr19:148 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_upcase_1_41}[r0x0e ] := 0x0 {const-unsigned-char literal}
                      00184 ;       .line   112; stdio/printf_tiny.c        upcase = 0;
0000BC 6A00           00185         CLRF    r0x0e
                      00186 ; ;ic:20:       iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] = iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] + 0x1 {const-unsigned-char literal}
                      00187 ;       .line   113; stdio/printf_tiny.c        ch++;
0000BE 2A00           00188         INCF    r0x03, F
0000C0 E300           00189         BNC     _00216_DS_
0000C2 4A00           00190         INFSNZ  r0x04, F
0000C4 2A00           00191         INCF    r0x05, F
                      00192 ; ;ic:21:       iTemp19 [k30 lr21:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] = @[iTemp4 [k8 lr6:159 so:0]{ ia1 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] + 0x0 {const-unsigned-char literal}]
0000C6                00193 _00216_DS_:
                      00194 ;       .line   115; stdio/printf_tiny.c        if (*ch == 'u')
0000C6 C000 FFE9      00195         MOVFF   r0x03, FSR0L
0000CA C000 FFF3      00196         MOVFF   r0x04, PRODL
0000CE 5000           00197         MOVF    r0x05, W
0000D0 EC00 F000      00198         CALL    __gptrget1
                      00199 ; #     MOVWF   r0x0f
                      00200 ; #;;ic:22:     iTemp20 [k31 lr22:23 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp19 [k30 lr21:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] == 0x75 {const-char literal}
                      00201 ; #     MOVF    r0x0f, W
0000D4 0A75           00202         XORLW   0x75
0000D6 E100           00203         BNZ     _00106_DS_
                      00204 ; ;ic:23:       if iTemp20 [k31 lr22:23 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_0($2)
                      00205 ; ;ic:24:       iTemp13 [k21 lr17:115 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_nosign_1_41}[r0x0c ] := 0x1 {const-unsigned-char literal}
                      00206 ;       .line   117; stdio/printf_tiny.c        HAVESIGN = 1;
0000D8 0E01           00207         MOVLW   0x01
0000DA 6E00           00208         MOVWF   r0x0c
                      00209 ; ;ic:25:       iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] = iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] + 0x1 {const-unsigned-char literal}
                      00210 ;       .line   118; stdio/printf_tiny.c        ++ch;
0000DC 2A00           00211         INCF    r0x03, F
0000DE E300           00212         BNC     _00106_DS_
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000E0 4A00           00213         INFSNZ  r0x04, F
0000E2 2A00           00214         INCF    r0x05, F
                      00215 ; ;ic:26:  _iffalse_0($2) :
                      00216 ; ;ic:27:       iTemp23 [k34 lr27:34 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] = @[iTemp4 [k8 lr6:159 so:0]{ ia1 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] + 0x0 {const-unsigned-char literal}]
0000E4                00217 _00219_DS_:
0000E4                00218 _00106_DS_:
                      00219 ;       .line   121; stdio/printf_tiny.c        if (*ch == 'l')
0000E4 C000 FFE9      00220         MOVFF   r0x03, FSR0L
0000E8 C000 FFF3      00221         MOVFF   r0x04, PRODL
0000EC 5000           00222         MOVF    r0x05, W
0000EE EC00 F000      00223         CALL    __gptrget1
                      00224 ; #     MOVWF   r0x0f
                      00225 ; #;;ic:28:     iTemp24 [k35 lr28:29 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp23 [k34 lr27:34 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] == 0x6c {const-char literal}
                      00226 ; #     MOVF    r0x0f, W
0000F2 6E00           00227         MOVWF   r0x0f
0000F4 0A6C           00228         XORLW   0x6c
0000F6 E100           00229         BNZ     _00110_DS_
                      00230 ; ;ic:29:       if iTemp24 [k35 lr28:29 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_2($6)
                      00231 ; ;ic:30:       iTemp10 [k15 lr14:86 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_flong_1_41}[r0x09 ] := 0x1 {const-unsigned-char literal}
                      00232 ;       .line   123; stdio/printf_tiny.c        ISLONG = 1;
0000F8 0E01           00233         MOVLW   0x01
0000FA 6E00           00234         MOVWF   r0x09
                      00235 ; ;ic:31:       iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] = iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] + 0x1 {const-unsigned-char literal}
                      00236 ;       .line   124; stdio/printf_tiny.c        ++ch;
0000FC 2A00           00237         INCF    r0x03, F
0000FE E300           00238         BNC     _00222_DS_
000100 4A00           00239         INFSNZ  r0x04, F
000102 2A00           00240         INCF    r0x05, F
                      00241 ; ;ic:32:        goto _ifend_2($7)
000104                00242 _00222_DS_:
000104 D000           00243         BRA     _00111_DS_
                      00244 ; ;ic:33:  _iffalse_2($6) :
                      00245 ; ;ic:34:       iTemp28 [k39 lr34:35 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp23 [k34 lr27:34 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] == 0x68 {const-char literal}
000106                00246 _00110_DS_:
                      00247 ;       .line   126; stdio/printf_tiny.c        else if (*ch == 'h')
000106 5000           00248         MOVF    r0x0f, W
000108 0A68           00249         XORLW   0x68
00010A E100           00250         BNZ     _00111_DS_
                      00251 ; ;ic:35:       if iTemp28 [k39 lr34:35 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _ifend_2($7)
                      00252 ; ;ic:36:       iTemp12 [k19 lr16:94 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_fchar_1_41}[r0x0b ] := 0x1 {const-unsigned-char literal}
                      00253 ;       .line   128; stdio/printf_tiny.c        ISCHAR = 1;
00010C 0E01           00254         MOVLW   0x01
00010E 6E00           00255         MOVWF   r0x0b
                      00256 ; ;ic:37:       iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] = iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] + 0x1 {const-unsigned-char literal}
                      00257 ;       .line   129; stdio/printf_tiny.c        ++ch;
000110 2A00           00258         INCF    r0x03, F
000112 E300           00259         BNC     _00111_DS_
000114 4A00           00260         INFSNZ  r0x04, F
000116 2A00           00261         INCF    r0x05, F
                      00262 ; ;ic:38:  _ifend_2($7) :
                      00263 ; ;ic:39:       iTemp31 [k42 lr39:67 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] = @[iTemp4 [k8 lr6:159 so:0]{ ia1 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] + 0x0 {const-unsigned-char literal}]
000118                00264 _00225_DS_:
000118                00265 _00111_DS_:
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00266 ;       .line   132; stdio/printf_tiny.c        if (*ch == 's')
000118 C000 FFE9      00267         MOVFF   r0x03, FSR0L
00011C C000 FFF3      00268         MOVFF   r0x04, PRODL
000120 5000           00269         MOVF    r0x05, W
000122 EC00 F000      00270         CALL    __gptrget1
                      00271 ; #     MOVWF   r0x0f
                      00272 ; #;;ic:40:     iTemp32 [k43 lr40:41 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp31 [k42 lr39:67 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] == 0x73 {const-char literal}
                      00273 ; #     MOVF    r0x0f, W
000126 6E00           00274         MOVWF   r0x0f
000128 0A73           00275         XORLW   0x73
00012A E100           00276         BNZ     _00127_DS_
                      00277 ; ;ic:41:       if iTemp32 [k43 lr40:41 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_8($23)
                      00278 ; ;ic:42:       iTemp11 [k17 lr15:71 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_fstr_1_41}[r0x0a ] := 0x1 {const-unsigned-char literal}
                      00279 ;       .line   133; stdio/printf_tiny.c        ISSTR = 1;
00012C 0E01           00280         MOVLW   0x01
00012E 6E00           00281         MOVWF   r0x0a
                      00282 ; ;ic:43:        goto _ifend_8($24)
000130 D000           00283         BRA     _00128_DS_
                      00284 ; ;ic:44:  _iffalse_8($23) :
                      00285 ; ;ic:45:       iTemp35 [k46 lr45:46 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp31 [k42 lr39:67 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] == 0x64 {const-char literal}
000132                00286 _00127_DS_:
                      00287 ;       .line   134; stdio/printf_tiny.c        else if (*ch == 'd')
000132 5000           00288         MOVF    r0x0f, W
000134 0A64           00289         XORLW   0x64
000136 E100           00290         BNZ     _00124_DS_
                      00291 ; ;ic:46:       if iTemp35 [k46 lr45:46 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_7($20)
                      00292 ; ;ic:47:       iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ] := 0xa {const-unsigned-char literal}
                      00293 ;       .line   135; stdio/printf_tiny.c        radix = 10;
000138 0E0A           00294         MOVLW   0x0a
00013A 6E00           00295         MOVWF   r0x0d
                      00296 ; ;ic:48:        goto _ifend_8($24)
00013C D000           00297         BRA     _00128_DS_
                      00298 ; ;ic:49:  _iffalse_7($20) :
                      00299 ; ;ic:50:       iTemp38 [k49 lr50:51 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp31 [k42 lr39:67 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] == 0x78 {const-char literal}
00013E                00300 _00124_DS_:
                      00301 ;       .line   136; stdio/printf_tiny.c        else if (*ch == 'x')
00013E 5000           00302         MOVF    r0x0f, W
000140 0A78           00303         XORLW   0x78
000142 E100           00304         BNZ     _00121_DS_
                      00305 ; ;ic:51:       if iTemp38 [k49 lr50:51 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_6($17)
                      00306 ; ;ic:52:       iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ] := 0x10 {const-unsigned-char literal}
                      00307 ;       .line   138; stdio/printf_tiny.c        radix = 16;
000144 0E10           00308         MOVLW   0x10
000146 6E00           00309         MOVWF   r0x0d
                      00310 ; ;ic:53:       iTemp15 [k25 lr19:148 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_upcase_1_41}[r0x0e ] := 0x0 {const-unsigned-char literal}
                      00311 ;       .line   139; stdio/printf_tiny.c        upcase = 0;
000148 6A00           00312         CLRF    r0x0e
                      00313 ; ;ic:54:        goto _ifend_8($24)
00014A D000           00314         BRA     _00128_DS_
                      00315 ; ;ic:55:  _iffalse_6($17) :
                      00316 ; ;ic:56:       iTemp41 [k52 lr56:57 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp31 [k42 lr39:67 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] == 0x58 {const-char literal}
00014C                00317 _00121_DS_:
                      00318 ;       .line   141; stdio/printf_tiny.c        else if (*ch == 'X')
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00014C 5000           00319         MOVF    r0x0f, W
00014E 0A58           00320         XORLW   0x58
000150 E100           00321         BNZ     _00118_DS_
                      00322 ; ;ic:57:       if iTemp41 [k52 lr56:57 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_5($14)
                      00323 ; ;ic:58:       iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ] := 0x10 {const-unsigned-char literal}
                      00324 ;       .line   143; stdio/printf_tiny.c        radix = 16;
000152 0E10           00325         MOVLW   0x10
000154 6E00           00326         MOVWF   r0x0d
                      00327 ; ;ic:59:       iTemp15 [k25 lr19:148 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_upcase_1_41}[r0x0e ] := 0x1 {const-unsigned-char literal}
                      00328 ;       .line   144; stdio/printf_tiny.c        upcase = 1;
000156 0E01           00329         MOVLW   0x01
000158 6E00           00330         MOVWF   r0x0e
                      00331 ; ;ic:60:        goto _ifend_8($24)
00015A D000           00332         BRA     _00128_DS_
                      00333 ; ;ic:61:  _iffalse_5($14) :
                      00334 ; ;ic:62:       iTemp44 [k55 lr62:63 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp31 [k42 lr39:67 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] == 0x63 {const-char literal}
00015C                00335 _00118_DS_:
                      00336 ;       .line   146; stdio/printf_tiny.c        else if (*ch == 'c')
00015C 5000           00337         MOVF    r0x0f, W
00015E 0A63           00338         XORLW   0x63
000160 E100           00339         BNZ     _00115_DS_
                      00340 ; ;ic:63:       if iTemp44 [k55 lr62:63 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_4($11)
                      00341 ; ;ic:64:       iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ] := 0x0 {const-unsigned-char literal}
                      00342 ;       .line   147; stdio/printf_tiny.c        radix = 0;
000162 6A00           00343         CLRF    r0x0d
                      00344 ; ;ic:65:        goto _ifend_8($24)
000164 D000           00345         BRA     _00128_DS_
                      00346 ; ;ic:66:  _iffalse_4($11) :
                      00347 ; ;ic:67:       iTemp47 [k58 lr67:68 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp31 [k42 lr39:67 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x0f ] == 0x6f {const-char literal}
000166                00348 _00115_DS_:
                      00349 ;       .line   148; stdio/printf_tiny.c        else if (*ch == 'o')
000166 5000           00350         MOVF    r0x0f, W
000168 0A6F           00351         XORLW   0x6f
00016A E100           00352         BNZ     _00128_DS_
                      00353 ; ;ic:68:       if iTemp47 [k58 lr67:68 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _ifend_8($24)
                      00354 ; ;ic:69:       iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ] := 0x8 {const-unsigned-char literal}
                      00355 ;       .line   149; stdio/printf_tiny.c        radix = 8;
00016C 0E08           00356         MOVLW   0x08
00016E 6E00           00357         MOVWF   r0x0d
                      00358 ; ;ic:70:  _ifend_8($24) :
                      00359 ; ;ic:71:       if iTemp11 [k17 lr15:71 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_fstr_1_41}[r0x0a ] == 0 goto _iffalse_15($48)
000170                00360 _00128_DS_:
                      00361 ;       .line   155; stdio/printf_tiny.c        if (ISSTR)
000170 5000           00362         MOVF    r0x0a, W
000172 E000           00363         BZ      _00152_DS_
                      00364 ; ;ic:72:       iTemp49 [k61 lr72:74 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0a r0x0f r0x10 ] = iTemp0 [k2 lr5:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}{ sir@ _printf_tiny_ap_1_41}[r0x00 r0x01 r0x02 ] + 0x3 {const-unsigned-char literal}
                      00365 ;       .line   157; stdio/printf_tiny.c        str = va_arg (ap, const char *);
000174 5000           00366         MOVF    r0x00, W
000176 0F03           00367         ADDLW   0x03
000178 6E00           00368         MOVWF   r0x0a
00017A 0E00           00369         MOVLW   0x00
00017C 2000           00370         ADDWFC  r0x01, W
00017E 6E00           00371         MOVWF   r0x0f
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000180 0E00           00372         MOVLW   0x00
000182 2000           00373         ADDWFC  r0x02, W
000184 6E00           00374         MOVWF   r0x10
                      00375 ; ;ic:73:       iTemp0 [k2 lr5:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}{ sir@ _printf_tiny_ap_1_41}[r0x00 r0x01 r0x02 ] := iTemp49 [k61 lr72:74 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0a r0x0f r0x10 ]
000186 C000 F000      00376         MOVFF   r0x0a, r0x00
00018A C000 F000      00377         MOVFF   r0x0f, r0x01
00018E C000 F000      00378         MOVFF   r0x10, r0x02
                      00379 ; ;ic:74:       iTemp50 [k62 lr74:75 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0a r0x0f r0x10 ] = iTemp49 [k61 lr72:74 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0a r0x0f r0x10 ] - 0x3 {unsigned-char literal}
000192 0EFD           00380         MOVLW   0xfd
000194 2600           00381         ADDWF   r0x0a, F
000196 0EFF           00382         MOVLW   0xff
000198 2200           00383         ADDWFC  r0x0f, F
00019A 2200           00384         ADDWFC  r0x10, F
                      00385 ; ;ic:75:       iTemp51 [k63 lr75:76 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char generic* generic* fixed}[r0x0a r0x0f r0x10 ] = (const-char generic* generic* fixed)iTemp50 [k62 lr74:75 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0a r0x0f r0x10 ]
                      00386 ; #     MOVF    r0x10, W
                      00387 ; #     MOVWF   r0x10
                      00388 ; #     MOVF    r0x10, W
                      00389 ; #     MOVF    r0x0f, W
                      00390 ; #     MOVF    r0x0f, W
                      00391 ; #     MOVWF   r0x0f
                      00392 ; #     MOVF    r0x0f, W
                      00393 ; #     MOVF    r0x0a, W
                      00394 ; #     MOVF    r0x0a, W
                      00395 ; #     MOVWF   r0x0a
                      00396 ; #;;ic:76:     iTemp58 [k72 lr76:84 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char generic* auto}[r0x0a r0x0f r0x10 ] = @[iTemp51 [k63 lr75:76 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{const-char generic* generic* fixed}[r0x0a r0x0f r0x10 ] + 0x0 {const-unsigned-char literal}]
00019C C000 FFE9      00397         MOVFF   r0x0a, FSR0L
0001A0 C000 FFF3      00398         MOVFF   r0x0f, PRODL
0001A4 5000           00399         MOVF    r0x10, W
0001A6 EC00 F000      00400         CALL    __gptrget3
0001AA 6E00           00401         MOVWF   r0x0a
0001AC CFF3 F000      00402         MOVFF   PRODL, r0x0f
0001B0 CFF4 F000      00403         MOVFF   PRODH, r0x10
                      00404 ; ;ic:78:  _whilecontinue_1($25) :
                      00405 ; ;ic:79:       iTemp54 [k66 lr79:81 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x11 ] = @[iTemp58 [k72 lr76:84 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{const-char generic* auto}[r0x0a r0x0f r0x10 ] + 0x0 {const-unsigned-char literal}]
0001B4                00406 _00129_DS_:
                      00407 ;       .line   158; stdio/printf_tiny.c        while (*str)
0001B4 C000 FFE9      00408         MOVFF   r0x0a, FSR0L
0001B8 C000 FFF3      00409         MOVFF   r0x0f, PRODL
0001BC 5000           00410         MOVF    r0x10, W
0001BE EC00 F000      00411         CALL    __gptrget1
0001C2 6E00           00412         MOVWF   r0x11
                      00413 ; ;ic:80:       if iTemp54 [k66 lr79:81 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x11 ] == 0 goto _ifend_16($52)
0001C4 5000           00414         MOVF    r0x11, W
0001C6 B4D8           00415         BTFSC   STATUS, 2
0001C8 D000           00416         BRA     _00156_DS_
                      00417 ; ;ic:81:       send iTemp54 [k66 lr79:81 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x11 ]{argreg = 1}
                      00418 ; ;ic:82:       iTemp57 [k71 lr82:82 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void fixed} = call _putchar [k67 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void function ( char fixed) fixed}
                      00419 ;       .line   160; stdio/printf_tiny.c        putchar (*str);
0001CA 5000           00420         MOVF    r0x11, W
0001CC EC00 F000      00421         CALL    _putchar
                      00422 ; ;ic:83:       iTemp58 [k72 lr76:84 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char generic* auto}[r0x0a r0x0f r0x10 ] = iTemp58 [k72 lr76:84 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char generic* auto}[r0x0a r0x0f r0x10 ] + 0x1 {const-unsigned-char literal}
                      00423 ;       .line   161; stdio/printf_tiny.c        ++str;
0001D0 2A00           00424         INCF    r0x0a, F
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001D2 E300           00425         BNC     _00238_DS_
0001D4 4A00           00426         INFSNZ  r0x0f, F
0001D6 2A00           00427         INCF    r0x10, F
                      00428 ; ;ic:84:        goto _whilecontinue_1($25)
0001D8                00429 _00238_DS_:
0001D8 D000           00430         BRA     _00129_DS_
                      00431 ; ;ic:85:  _iffalse_15($48) :
                      00432 ; ;ic:86:       if iTemp10 [k15 lr14:86 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_flong_1_41}[r0x09 ] == 0 goto _iffalse_11($34)
0001DA                00433 _00152_DS_:
                      00434 ;       .line   166; stdio/printf_tiny.c        if (ISLONG)
0001DA 5000           00435         MOVF    r0x09, W
0001DC E000           00436         BZ      _00138_DS_
                      00437 ; ;ic:87:       iTemp60 [k75 lr87:89 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x09 r0x0a r0x0f ] = iTemp0 [k2 lr5:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}{ sir@ _printf_tiny_ap_1_41}[r0x00 r0x01 r0x02 ] + 0x4 {const-unsigned-char literal}
                      00438 ;       .line   167; stdio/printf_tiny.c        val = va_arg (ap, long);
0001DE 5000           00439         MOVF    r0x00, W
0001E0 0F04           00440         ADDLW   0x04
0001E2 6E00           00441         MOVWF   r0x09
0001E4 0E00           00442         MOVLW   0x00
0001E6 2000           00443         ADDWFC  r0x01, W
0001E8 6E00           00444         MOVWF   r0x0a
0001EA 0E00           00445         MOVLW   0x00
0001EC 2000           00446         ADDWFC  r0x02, W
0001EE 6E00           00447         MOVWF   r0x0f
                      00448 ; ;ic:88:       iTemp0 [k2 lr5:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}{ sir@ _printf_tiny_ap_1_41}[r0x00 r0x01 r0x02 ] := iTemp60 [k75 lr87:89 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x09 r0x0a r0x0f ]
0001F0 C000 F000      00449         MOVFF   r0x09, r0x00
0001F4 C000 F000      00450         MOVFF   r0x0a, r0x01
0001F8 C000 F000      00451         MOVFF   r0x0f, r0x02
                      00452 ; ;ic:89:       iTemp61 [k76 lr89:90 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x09 r0x0a r0x0f ] = iTemp60 [k75 lr87:89 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x09 r0x0a r0x0f ] - 0x4 {unsigned-char literal}
0001FC 0EFC           00453         MOVLW   0xfc
0001FE 2600           00454         ADDWF   r0x09, F
000200 0EFF           00455         MOVLW   0xff
000202 2200           00456         ADDWFC  r0x0a, F
000204 2200           00457         ADDWFC  r0x0f, F
                      00458 ; ;ic:90:       iTemp62 [k77 lr90:91 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{long-int generic* fixed}[r0x09 r0x0a r0x0f ] = (long-int generic* fixed)iTemp61 [k76 lr89:90 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x09 r0x0a r0x0f ]
                      00459 ; #     MOVF    r0x0f, W
                      00460 ; #     MOVWF   r0x0f
                      00461 ; #     MOVF    r0x0f, W
                      00462 ; #     MOVF    r0x0a, W
                      00463 ; #     MOVF    r0x0a, W
                      00464 ; #     MOVWF   r0x0a
                      00465 ; #     MOVF    r0x0a, W
                      00466 ; #     MOVF    r0x09, W
                      00467 ; #     MOVF    r0x09, W
                      00468 ; #     MOVWF   r0x09
                      00469 ; #;;ic:91:     iTemp59 [k73 lr91:150 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{long-int auto}{ sir@ _printf_tiny_val_1_41}[r0x09 r0x0a r0x0f r0x10 ] = @[iTemp62 [k77 lr90:91 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{long-int generic* fixed}[r0x09 r0x0a r0x0f ] + 0x0 {const-unsigned-char literal}]
000206 C000 FFE9      00470         MOVFF   r0x09, FSR0L
00020A C000 FFF3      00471         MOVFF   r0x0a, PRODL
00020E 5000           00472         MOVF    r0x0f, W
000210 EC00 F000      00473         CALL    __gptrget4
000214 6E00           00474         MOVWF   r0x09
000216 CFF3 F000      00475         MOVFF   PRODL, r0x0a
00021A CFF4 F000      00476         MOVFF   PRODH, r0x0f
00021E CFE9 F000      00477         MOVFF   FSR0L, r0x10
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00478 ; ;ic:92:        goto _ifend_11($35)
000222 D000           00479         BRA     _00139_DS_
                      00480 ; ;ic:93:  _iffalse_11($34) :
                      00481 ; ;ic:94:       if iTemp12 [k19 lr16:94 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_fchar_1_41}[r0x0b ] == 0 goto _iffalse_10($31)
000224                00482 _00138_DS_:
                      00483 ;       .line   168; stdio/printf_tiny.c        else if (ISCHAR)
000224 5000           00484         MOVF    r0x0b, W
000226 E000           00485         BZ      _00135_DS_
                      00486 ; ;ic:95:       iTemp64 [k79 lr95:97 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0b r0x11 r0x12 ] = iTemp0 [k2 lr5:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}{ sir@ _printf_tiny_ap_1_41}[r0x00 r0x01 r0x02 ] + 0x2 {const-unsigned-char literal}
                      00487 ;       .line   170; stdio/printf_tiny.c        val = (unsigned char) va_arg (ap, int);       // FIXME: SDCC casts char arguments into ints
000228 5000           00488         MOVF    r0x00, W
00022A 0F02           00489         ADDLW   0x02
00022C 6E00           00490         MOVWF   r0x0b
00022E 0E00           00491         MOVLW   0x00
000230 2000           00492         ADDWFC  r0x01, W
000232 6E00           00493         MOVWF   r0x11
000234 0E00           00494         MOVLW   0x00
000236 2000           00495         ADDWFC  r0x02, W
000238 6E00           00496         MOVWF   r0x12
                      00497 ; ;ic:96:       iTemp0 [k2 lr5:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}{ sir@ _printf_tiny_ap_1_41}[r0x00 r0x01 r0x02 ] := iTemp64 [k79 lr95:97 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0b r0x11 r0x12 ]
00023A C000 F000      00498         MOVFF   r0x0b, r0x00
00023E C000 F000      00499         MOVFF   r0x11, r0x01
000242 C000 F000      00500         MOVFF   r0x12, r0x02
                      00501 ; ;ic:97:       iTemp65 [k80 lr97:98 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0b r0x11 r0x12 ] = iTemp64 [k79 lr95:97 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0b r0x11 r0x12 ] - 0x2 {unsigned-char literal}
000246 0EFE           00502         MOVLW   0xfe
000248 2600           00503         ADDWF   r0x0b, F
00024A 0EFF           00504         MOVLW   0xff
00024C 2200           00505         ADDWFC  r0x11, F
00024E 2200           00506         ADDWFC  r0x12, F
                      00507 ; ;ic:98:       iTemp66 [k81 lr98:99 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int generic* fixed}[r0x0b r0x11 r0x12 ] = (int generic* fixed)iTemp65 [k80 lr97:98 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0b r0x11 r0x12 ]
                      00508 ; #     MOVF    r0x12, W
                      00509 ; #     MOVWF   r0x12
                      00510 ; #     MOVF    r0x12, W
                      00511 ; #     MOVF    r0x11, W
                      00512 ; #     MOVF    r0x11, W
                      00513 ; #     MOVWF   r0x11
                      00514 ; #     MOVF    r0x11, W
                      00515 ; #     MOVF    r0x0b, W
                      00516 ; #     MOVF    r0x0b, W
                      00517 ; #     MOVWF   r0x0b
                      00518 ; #;;ic:99:     iTemp67 [k82 lr99:100 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x0b r0x11 ] = @[iTemp66 [k81 lr98:99 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{int generic* fixed}[r0x0b r0x11 r0x12 ] + 0x0 {const-unsigned-char literal}]
000250 C000 FFE9      00519         MOVFF   r0x0b, FSR0L
000254 C000 FFF3      00520         MOVFF   r0x11, PRODL
000258 5000           00521         MOVF    r0x12, W
00025A EC00 F000      00522         CALL    __gptrget2
00025E 6E00           00523         MOVWF   r0x0b
                      00524 ; ;ic:100:      iTemp68 [k83 lr100:101 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char fixed}[r0x0b ] = (unsigned-char fixed)iTemp67 [k82 lr99:100 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x0b r0x11 ]
                      00525 ; ;ic:101:      iTemp59 [k73 lr91:150 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{long-int auto}{ sir@ _printf_tiny_val_1_41}[r0x09 r0x0a r0x0f r0x10 ] = (long-int auto)iTemp68 [k83 lr100:101 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char fixed}[r0x0b ]
000260 C000 F000      00526         MOVFF   r0x0b, r0x09
000264 6A00           00527         CLRF    r0x0a
000266 6A00           00528         CLRF    r0x0f
000268 6A00           00529         CLRF    r0x10
                      00530 ; ;ic:102:      if iTemp13 [k21 lr17:115 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_nosign_1_41}[r0x0c ] != 0 goto _ifend_11($35)
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00531 ;       .line   171; stdio/printf_tiny.c        if (!HAVESIGN)
00026A 5000           00532         MOVF    r0x0c, W
00026C E100           00533         BNZ     _00139_DS_
                      00534 ; ;ic:103:      iTemp70 [k85 lr103:104 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x0b ] = (char fixed)iTemp59 [k73 lr91:150 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{long-int auto}{ sir@ _printf_tiny_val_1_41}[r0x09 r0x0a r0x0f r0x10 ]
                      00535 ;       .line   172; stdio/printf_tiny.c        val = (char) val;   // FIXME cont'd: sign-extend if required
00026E 5000           00536         MOVF    r0x09, W
000270 6E00           00537         MOVWF   r0x0b
                      00538 ; ;ic:104:      iTemp59 [k73 lr91:150 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{long-int auto}{ sir@ _printf_tiny_val_1_41}[r0x09 r0x0a r0x0f r0x10 ] = (long-int auto)iTemp70 [k85 lr103:104 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x0b ]
000272 C000 F000      00539         MOVFF   r0x0b, r0x09
000276 6AE8           00540         CLRF    WREG
000278 BE00           00541         BTFSC   r0x0b, 7
00027A 0EFF           00542         MOVLW   0xff
00027C 6E00           00543         MOVWF   r0x0a
00027E 6E00           00544         MOVWF   r0x0f
000280 6E00           00545         MOVWF   r0x10
                      00546 ; ;ic:105:       goto _ifend_11($35)
000282 D000           00547         BRA     _00139_DS_
                      00548 ; ;ic:106:  _iffalse_10($31) :
                      00549 ; ;ic:107:      iTemp72 [k87 lr107:109 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0b r0x11 r0x12 ] = iTemp0 [k2 lr5:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}{ sir@ _printf_tiny_ap_1_41}[r0x00 r0x01 r0x02 ] + 0x2 {const-unsigned-char literal}
000284                00550 _00135_DS_:
                      00551 ;       .line   175; stdio/printf_tiny.c        val = va_arg (ap, int);
000284 5000           00552         MOVF    r0x00, W
000286 0F02           00553         ADDLW   0x02
000288 6E00           00554         MOVWF   r0x0b
00028A 0E00           00555         MOVLW   0x00
00028C 2000           00556         ADDWFC  r0x01, W
00028E 6E00           00557         MOVWF   r0x11
000290 0E00           00558         MOVLW   0x00
000292 2000           00559         ADDWFC  r0x02, W
000294 6E00           00560         MOVWF   r0x12
                      00561 ; ;ic:108:      iTemp0 [k2 lr5:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}{ sir@ _printf_tiny_ap_1_41}[r0x00 r0x01 r0x02 ] := iTemp72 [k87 lr107:109 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0b r0x11 r0x12 ]
000296 C000 F000      00562         MOVFF   r0x0b, r0x00
00029A C000 F000      00563         MOVFF   r0x11, r0x01
00029E C000 F000      00564         MOVFF   r0x12, r0x02
                      00565 ; ;ic:109:      iTemp73 [k88 lr109:110 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0b r0x11 r0x12 ] = iTemp72 [k87 lr107:109 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0b r0x11 r0x12 ] - 0x2 {unsigned-char literal}
0002A2 0EFE           00566         MOVLW   0xfe
0002A4 2600           00567         ADDWF   r0x0b, F
0002A6 0EFF           00568         MOVLW   0xff
0002A8 2200           00569         ADDWFC  r0x11, F
0002AA 2200           00570         ADDWFC  r0x12, F
                      00571 ; ;ic:110:      iTemp74 [k89 lr110:111 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int generic* fixed}[r0x0b r0x11 r0x12 ] = (int generic* fixed)iTemp73 [k88 lr109:110 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char generic* auto}[r0x0b r0x11 r0x12 ]
                      00572 ; #     MOVF    r0x12, W
                      00573 ; #     MOVWF   r0x12
                      00574 ; #     MOVF    r0x12, W
                      00575 ; #     MOVF    r0x11, W
                      00576 ; #     MOVF    r0x11, W
                      00577 ; #     MOVWF   r0x11
                      00578 ; #     MOVF    r0x11, W
                      00579 ; #     MOVF    r0x0b, W
                      00580 ; #     MOVF    r0x0b, W
                      00581 ; #     MOVWF   r0x0b
                      00582 ; #;;ic:111:    iTemp75 [k90 lr111:112 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x0b r0x11 ] = @[iTemp74 [k89 lr110:111 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{int generic* fixed}[r0x0b r0x11 r0x12 ] + 0x0 {const-unsigned-char literal}]
0002AC C000 FFE9      00583         MOVFF   r0x0b, FSR0L
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002B0 C000 FFF3      00584         MOVFF   r0x11, PRODL
0002B4 5000           00585         MOVF    r0x12, W
0002B6 EC00 F000      00586         CALL    __gptrget2
0002BA 6E00           00587         MOVWF   r0x0b
0002BC CFF3 F000      00588         MOVFF   PRODL, r0x11
                      00589 ; ;ic:112:      iTemp59 [k73 lr91:150 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{long-int auto}{ sir@ _printf_tiny_val_1_41}[r0x09 r0x0a r0x0f r0x10 ] = (long-int auto)iTemp75 [k90 lr111:112 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x0b r0x11 ]
0002C0 C000 F000      00590         MOVFF   r0x0b, r0x09
0002C4 C000 F000      00591         MOVFF   r0x11, r0x0a
0002C8 6AE8           00592         CLRF    WREG
0002CA BE00           00593         BTFSC   r0x11, 7
0002CC 0EFF           00594         MOVLW   0xff
0002CE 6E00           00595         MOVWF   r0x0f
0002D0 6E00           00596         MOVWF   r0x10
                      00597 ; ;ic:113:  _ifend_11($35) :
                      00598 ; ;ic:114:      if iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ] == 0 goto _iffalse_14($45)
0002D2                00599 _00139_DS_:
                      00600 ;       .line   177; stdio/printf_tiny.c        if (radix)
0002D2 5000           00601         MOVF    r0x0d, W
0002D4 B4D8           00602         BTFSC   STATUS, 2
0002D6 D000           00603         BRA     _00149_DS_
                      00604 ; ;ic:115:      if iTemp13 [k21 lr17:115 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_nosign_1_41}[r0x0c ] == 0 goto _iffalse_12($37)
                      00605 ;       .line   179; stdio/printf_tiny.c        if (HAVESIGN)
0002D8 5000           00606         MOVF    r0x0c, W
0002DA E000           00607         BZ      _00141_DS_
                      00608 ; ;ic:116:      send iTemp59 [k73 lr91:150 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{long-int auto}{ sir@ _printf_tiny_val_1_41}[r0x09 r0x0a r0x0f r0x10 ]{argreg = 1}
                      00609 ; ;ic:117:      send iTemp82 [k107 lr7:159 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* fixed}{ sir@ _printf_tiny_str1_1_41}[r0x06 r0x07 ]{argreg = 2}
                      00610 ; ;ic:118:      send iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ]{argreg = 3}
                      00611 ; ;ic:119:      iTemp78 [k98 lr119:119 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void fixed} = call _ultoa [k92 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void function ( unsigned-long-int fixed, char near* fixed, unsigned-char fixed) fixed}
                      00612 ;       .line   180; stdio/printf_tiny.c        ultoa (val, buffer, radix);
0002DC 5000           00613         MOVF    r0x0d, W
0002DE 6EE5           00614         MOVWF   POSTDEC1
0002E0 5000           00615         MOVF    r0x07, W
0002E2 6EE5           00616         MOVWF   POSTDEC1
0002E4 5000           00617         MOVF    r0x06, W
0002E6 6EE5           00618         MOVWF   POSTDEC1
0002E8 5000           00619         MOVF    r0x10, W
0002EA 6EE5           00620         MOVWF   POSTDEC1
0002EC 5000           00621         MOVF    r0x0f, W
0002EE 6EE5           00622         MOVWF   POSTDEC1
0002F0 5000           00623         MOVF    r0x0a, W
0002F2 6EE5           00624         MOVWF   POSTDEC1
0002F4 5000           00625         MOVF    r0x09, W
0002F6 6EE5           00626         MOVWF   POSTDEC1
0002F8 EC00 F000      00627         CALL    _ultoa
0002FC 0E07           00628         MOVLW   0x07
0002FE 26E1           00629         ADDWF   FSR1L, F
                      00630 ; ;ic:120:       goto _ifend_12($38)
000300 D000           00631         BRA     _00142_DS_
                      00632 ; ;ic:121:  _iffalse_12($37) :
                      00633 ; ;ic:122:      send iTemp59 [k73 lr91:150 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{long-int auto}{ sir@ _printf_tiny_val_1_41}[r0x09 r0x0a r0x0f r0x10 ]{argreg = 1}
                      00634 ; ;ic:123:      send iTemp82 [k107 lr7:159 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* fixed}{ sir@ _printf_tiny_str1_1_41}[r0x06 r0x07 ]{argreg = 2}
                      00635 ; ;ic:124:      send iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ]{argreg = 3}
                      00636 ; ;ic:125:      iTemp80 [k104 lr125:125 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void fixed} = call _ltoa [k99 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void function ( long-int fixed, char near* fixed, unsigned-char fixed) fixed}
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000302                00637 _00141_DS_:
                      00638 ;       .line   182; stdio/printf_tiny.c        ltoa (val, buffer, radix);
000302 5000           00639         MOVF    r0x0d, W
000304 6EE5           00640         MOVWF   POSTDEC1
000306 5000           00641         MOVF    r0x07, W
000308 6EE5           00642         MOVWF   POSTDEC1
00030A 5000           00643         MOVF    r0x06, W
00030C 6EE5           00644         MOVWF   POSTDEC1
00030E 5000           00645         MOVF    r0x10, W
000310 6EE5           00646         MOVWF   POSTDEC1
000312 5000           00647         MOVF    r0x0f, W
000314 6EE5           00648         MOVWF   POSTDEC1
000316 5000           00649         MOVF    r0x0a, W
000318 6EE5           00650         MOVWF   POSTDEC1
00031A 5000           00651         MOVF    r0x09, W
00031C 6EE5           00652         MOVWF   POSTDEC1
00031E EC00 F000      00653         CALL    _ltoa
000322 0E07           00654         MOVLW   0x07
000324 26E1           00655         ADDWF   FSR1L, F
                      00656 ; ;ic:126:  _ifend_12($38) :
                      00657 ; ;ic:127:      iTemp91 [k118 lr127:148 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* auto}[r0x0b r0x0c ] := iTemp82 [k107 lr7:159 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* fixed}{ sir@ _printf_tiny_str1_1_41}[r0x06 r0x07 ]
000326                00658 _00142_DS_:
                      00659 ;       .line   184; stdio/printf_tiny.c        str1 = buffer;
000326 C000 F000      00660         MOVFF   r0x06, r0x0b
00032A C000 F000      00661         MOVFF   r0x07, r0x0c
                      00662 ; ;ic:129:  _whilecontinue_2($41) :
                      00663 ; ;ic:130:      iTemp84 [k109 lr130:132 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x11 ] = @[iTemp91 [k118 lr127:148 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char near* auto}[r0x0b r0x0c ] + 0x0 {const-unsigned-char literal}]
00032E                00664 _00145_DS_:
                      00665 ;       .line   185; stdio/printf_tiny.c        while ((*str1))
00032E C000 FFE9      00666         MOVFF   r0x0b, FSR0L
000332 C000 FFEA      00667         MOVFF   r0x0c, FSR0H
000336 CFEF F000      00668         MOVFF   INDF0, r0x11
                      00669 ; ;ic:131:      if iTemp84 [k109 lr130:132 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x11 ] == 0 goto _ifend_16($52)
00033A 5000           00670         MOVF    r0x11, W
00033C E000           00671         BZ      _00156_DS_
                      00672 ; ;ic:132:      iTemp86 [k111 lr132:133 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x11 ] := iTemp84 [k109 lr130:132 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x11 ]
                      00673 ; ;ic:133:      iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ] := iTemp86 [k111 lr132:133 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x11 ]
                      00674 ;       .line   187; stdio/printf_tiny.c        radix = *str1;
00033E C000 F000      00675         MOVFF   r0x11, r0x0d
                      00676 ; ;ic:134:      if iTemp15 [k25 lr19:148 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_upcase_1_41}[r0x0e ] == 0 goto _iffalse_13($40)
                      00677 ;       .line   188; stdio/printf_tiny.c        if (upcase)
000342 5000           00678         MOVF    r0x0e, W
000344 E000           00679         BZ      _00144_DS_
                      00680 ; ;ic:135:      send iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ]{argreg = 1}
                      00681 ; ;ic:136:      iTemp87 [k114 lr136:137 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x11 ] = call _islower [k112 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char function ( unsigned-char fixed) fixed}
                      00682 ;       .line   189; stdio/printf_tiny.c        radix = toupper (radix);
000346 5000           00683         MOVF    r0x0d, W
000348 6EE5           00684         MOVWF   POSTDEC1
00034A EC00 F000      00685         CALL    _islower
00034E 6E00           00686         MOVWF   r0x11
000350 52E6           00687         MOVF    POSTINC1, F
                      00688 ; ;ic:137:      if iTemp87 [k114 lr136:137 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x11 ] == 0 goto iTempLbl0($58)
000352 5000           00689         MOVF    r0x11, W
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000354 E000           00690         BZ      _00162_DS_
                      00691 ; ;ic:138:      iTemp88 [k115 lr138:143 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char auto}[r0x11 ] = iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ] & 0xffffffdf {char literal}
000356 0EDF           00692         MOVLW   0xdf
000358 1400           00693         ANDWF   r0x0d, W
00035A 6E00           00694         MOVWF   r0x11
                      00695 ; ;ic:139:       goto iTempLbl1($59)
00035C D000           00696         BRA     _00163_DS_
                      00697 ; ;ic:140:  iTempLbl0($58) :
                      00698 ; ;ic:141:      iTemp88 [k115 lr138:143 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char auto}[r0x11 ] := iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ]
00035E                00699 _00162_DS_:
00035E C000 F000      00700         MOVFF   r0x0d, r0x11
                      00701 ; ;ic:142:  iTempLbl1($59) :
                      00702 ; ;ic:143:      iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ] := iTemp88 [k115 lr138:143 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char auto}[r0x11 ]
000362                00703 _00163_DS_:
000362 C000 F000      00704         MOVFF   r0x11, r0x0d
                      00705 ; ;ic:144:  _iffalse_13($40) :
                      00706 ; ;ic:145:      send iTemp14 [k23 lr18:145 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char auto}{ sir@ _printf_tiny_radix_1_41}[r0x0d ]{argreg = 1}
                      00707 ; ;ic:146:      iTemp90 [k117 lr146:146 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void fixed} = call _putchar [k67 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void function ( char fixed) fixed}
000366                00708 _00144_DS_:
                      00709 ;       .line   190; stdio/printf_tiny.c        putchar (radix);
000366 5000           00710         MOVF    r0x0d, W
000368 EC00 F000      00711         CALL    _putchar
                      00712 ; ;ic:147:      iTemp91 [k118 lr127:148 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* auto}[r0x0b r0x0c ] = iTemp91 [k118 lr127:148 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* auto}[r0x0b r0x0c ] + 0x1 {const-unsigned-char literal}
                      00713 ;       .line   191; stdio/printf_tiny.c        ++str1;
00036C 4A00           00714         INFSNZ  r0x0b, F
00036E 2A00           00715         INCF    r0x0c, F
                      00716 ; ;ic:148:       goto _whilecontinue_2($41)
000370 D000           00717         BRA     _00145_DS_
                      00718 ; ;ic:149:  _iffalse_14($45) :
                      00719 ; ;ic:150:      iTemp92 [k119 lr150:151 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x09 ] = (char fixed)iTemp59 [k73 lr91:150 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{long-int auto}{ sir@ _printf_tiny_val_1_41}[r0x09 r0x0a r0x0f r0x10 ]
                      00720 ; ;ic:151:      send iTemp92 [k119 lr150:151 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x09 ]{argreg = 1}
                      00721 ; ;ic:152:      iTemp93 [k120 lr152:152 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void fixed} = call _putchar [k67 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void function ( char fixed) fixed}
000372                00722 _00149_DS_:
                      00723 ;       .line   195; stdio/printf_tiny.c        putchar ((char) val);
000372 5000           00724         MOVF    r0x09, W
000374 EC00 F000      00725         CALL    _putchar
                      00726 ; ;ic:153:       goto _ifend_16($52)
000378 D000           00727         BRA     _00156_DS_
                      00728 ; ;ic:154:  _iffalse_16($51) :
                      00729 ; ;ic:155:      send iTemp6 [k11 lr10:155 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x08 ]{argreg = 1}
                      00730 ; ;ic:156:      iTemp96 [k123 lr156:156 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void fixed} = call _putchar [k67 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void function ( char fixed) fixed}
00037A                00731 _00155_DS_:
                      00732 ;       .line   199; stdio/printf_tiny.c        putchar (*ch);
00037A 5000           00733         MOVF    r0x08, W
00037C EC00 F000      00734         CALL    _putchar
                      00735 ; ;ic:157:  _ifend_16($52) :
                      00736 ; ;ic:158:      iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] = iTemp4 [k8 lr6:159 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-char generic* auto}{ sir@ _printf_tiny_ch_1_41}[r0x03 r0x04 r0x05 ] + 0x1 {const-unsigned-char literal}
000380                00737 _00156_DS_:
                      00738 ;       .line   201; stdio/printf_tiny.c        ++ch;
000380 2A00           00739         INCF    r0x03, F
000382 E300           00740         BNC     _00240_DS_
000384 4A00           00741         INFSNZ  r0x04, F
000386 2A00           00742         INCF    r0x05, F
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00743 ; ;ic:159:       goto _whilecontinue_0($53)
000388                00744 _00240_DS_:
000388 D000           00745         BRA     _00157_DS_
                      00746 ; ;ic:160:  _return($56) :
                      00747 ; ;ic:161:      eproc _printf_tiny [k1 lr0:0 so:13]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void function ( const-char generic* auto) __reentrant fixed}
00038A                00748 _00160_DS_:
00038A CFE4 F000      00749         MOVFF   PREINC1, r0x12
00038E CFE4 F000      00750         MOVFF   PREINC1, r0x11
000392 CFE4 F000      00751         MOVFF   PREINC1, r0x10
000396 CFE4 F000      00752         MOVFF   PREINC1, r0x0f
00039A CFE4 F000      00753         MOVFF   PREINC1, r0x0e
00039E CFE4 F000      00754         MOVFF   PREINC1, r0x0d
0003A2 CFE4 F000      00755         MOVFF   PREINC1, r0x0c
0003A6 CFE4 F000      00756         MOVFF   PREINC1, r0x0b
0003AA CFE4 F000      00757         MOVFF   PREINC1, r0x0a
0003AE CFE4 F000      00758         MOVFF   PREINC1, r0x09
0003B2 CFE4 F000      00759         MOVFF   PREINC1, r0x08
0003B6 CFE4 F000      00760         MOVFF   PREINC1, r0x07
0003BA CFE4 F000      00761         MOVFF   PREINC1, r0x06
0003BE CFE4 F000      00762         MOVFF   PREINC1, r0x05
0003C2 CFE4 F000      00763         MOVFF   PREINC1, r0x04
0003C6 CFE4 F000      00764         MOVFF   PREINC1, r0x03
0003CA CFE4 F000      00765         MOVFF   PREINC1, r0x02
0003CE CFE4 F000      00766         MOVFF   PREINC1, r0x01
0003D2 CFE4 F000      00767         MOVFF   PREINC1, r0x00
0003D6 6EE6           00768         MOVWF   POSTINC1
0003D8 0E0C           00769         MOVLW   0x0c
0003DA 26E1           00770         ADDWF   FSR1L, F
0003DC B0D8           00771         BTFSC   STATUS, 0
0003DE 2AE2           00772         INCF    FSR1H, F
0003E0 1EE8           00773         COMF    WREG, F
0003E2 50E3           00774         MOVF    PLUSW1, W
0003E4 CFE4 FFD9      00775         MOVFF   PREINC1, FSR2L
0003E8 0012           00776         RETURN  
                      00777 
                      00778 
                      00779 
                      00780 ; Statistics:
                      00781 ; code size:     1002 (0x03ea) bytes ( 0.76%)
                      00782 ;                 501 (0x01f5) words
                      00783 ; udata size:       0 (0x0000) bytes ( 0.00%)
                      00784 ; access size:     19 (0x0013) bytes
                      00785 
                      00786 
                      00787         end
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE 16


SYMBOL TABLE
  LABEL                             VALUE

FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2H                             00000FDA
FSR2L                             00000FD9
INDF0                             00000FEF
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
POSTINC1                          00000FE6
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00106_DS_                        000000E4
_00110_DS_                        00000106
_00111_DS_                        00000118
_00115_DS_                        00000166
_00118_DS_                        0000015C
_00121_DS_                        0000014C
_00124_DS_                        0000013E
_00127_DS_                        00000132
_00128_DS_                        00000170
_00129_DS_                        000001B4
_00135_DS_                        00000284
_00138_DS_                        00000224
_00139_DS_                        000002D2
_00141_DS_                        00000302
_00142_DS_                        00000326
_00144_DS_                        00000366
_00145_DS_                        0000032E
_00149_DS_                        00000372
_00152_DS_                        000001DA
_00155_DS_                        0000037A
_00156_DS_                        00000380
_00157_DS_                        00000094
_00160_DS_                        0000038A
_00162_DS_                        0000035E
_00163_DS_                        00000362
_00215_DS_                        000000B2
_00216_DS_                        000000C6
_00219_DS_                        000000E4
_00222_DS_                        00000104
_00225_DS_                        00000118
_00238_DS_                        000001D8
_00240_DS_                        00000388
__18F452                          00000001
__gptrget1                        00000000
__gptrget2                        00000000
__gptrget3                        00000000
__gptrget4                        00000000
gpasm-0.14.1 (Aug 18 2017)   printf_tiny.asm    8-18-2017  19:21:37          PAGE 17


SYMBOL TABLE
  LABEL                             VALUE 

_islower                          00000000
_ltoa                             00000000
_printf_tiny                      00000000
_putchar                          00000000
_stdin                            00000000
_stdout                           00000000
_ultoa                            00000000
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009
r0x0a                             0000000A
r0x0b                             0000000B
r0x0c                             0000000C
r0x0d                             0000000D
r0x0e                             0000000E
r0x0f                             0000000F
r0x10                             00000010
r0x11                             00000011
r0x12                             00000012

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

