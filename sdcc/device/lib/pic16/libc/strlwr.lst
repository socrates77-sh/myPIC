gpasm-0.14.1 (Aug 18 2017)   strlwr.asm         8-18-2017  19:22:20          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;--------------------------------------------------------
                      00002 ; File Created by SDCC : free open source ANSI-C Compiler
                      00003 ; Version 3.2.0 #8004 (Aug 18 2017) (MINGW32)
                      00004 ; This file was generated Fri Aug 18 19:22:19 2017
                      00005 ;--------------------------------------------------------
                      00006 ; PIC16 port for the Microchip 16-bit core micros
                      00007 ;--------------------------------------------------------
                      00008         list    p=18f452
                      00009 
                      00010         radix dec
                      00011 
                      00012 ;--------------------------------------------------------
                      00013 ; public variables in this module
                      00014 ;--------------------------------------------------------
                      00015         global  _strlwr
                      00016 
                      00017 ;--------------------------------------------------------
                      00018 ; extern variables in this module
                      00019 ;--------------------------------------------------------
                      00020         extern  __gptrget1
                      00021         extern  __gptrput1
                      00022         extern  _isupper
                      00023 
                      00024 ;--------------------------------------------------------
                      00025 ;       Equates to used internal registers
                      00026 ;--------------------------------------------------------
  00000FD8            00027 STATUS  equ     0xfd8
  00000FE8            00028 WREG    equ     0xfe8
  00000FE9            00029 FSR0L   equ     0xfe9
  00000FE1            00030 FSR1L   equ     0xfe1
  00000FD9            00031 FSR2L   equ     0xfd9
  00000FE6            00032 POSTINC1        equ     0xfe6
  00000FE5            00033 POSTDEC1        equ     0xfe5
  00000FE4            00034 PREINC1 equ     0xfe4
  00000FDB            00035 PLUSW2  equ     0xfdb
  00000FF3            00036 PRODL   equ     0xff3
  00000FF4            00037 PRODH   equ     0xff4
                      00038 
                      00039 
                      00040 ; Internal registers
                      00041 .registers      udata_ovr       0x0000
000000                00042 r0x00   res     1
000001                00043 r0x01   res     1
000002                00044 r0x02   res     1
000003                00045 r0x03   res     1
000004                00046 r0x04   res     1
000005                00047 r0x05   res     1
000006                00048 r0x06   res     1
000007                00049 r0x07   res     1
000008                00050 r0x08   res     1
000009                00051 r0x09   res     1
                      00052 
                      00053 ;--------------------------------------------------------
gpasm-0.14.1 (Aug 18 2017)   strlwr.asm         8-18-2017  19:22:20          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ; global & static initialisations
                      00055 ;--------------------------------------------------------
                      00056 ; I code from now on!
                      00057 ; ; Starting pCode block
                      00058 ; ;ic:1:  _entry($5) :
                      00059 ; ;ic:2:        proc _strlwr [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* function ( char generic* fixed) fixed}
                      00060 S_strlwr__strlwr        code
000000                00061 _strlwr:
                      00062 ;       .line   33; string/strlwr.c     strlwr (char *str) 
000000 CFD9 FFE5      00063         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00064         MOVFF   FSR1L, FSR2L
000008 C000 FFE5      00065         MOVFF   r0x00, POSTDEC1
00000C C000 FFE5      00066         MOVFF   r0x01, POSTDEC1
000010 C000 FFE5      00067         MOVFF   r0x02, POSTDEC1
000014 C000 FFE5      00068         MOVFF   r0x03, POSTDEC1
000018 C000 FFE5      00069         MOVFF   r0x04, POSTDEC1
00001C C000 FFE5      00070         MOVFF   r0x05, POSTDEC1
000020 C000 FFE5      00071         MOVFF   r0x06, POSTDEC1
000024 C000 FFE5      00072         MOVFF   r0x07, POSTDEC1
000028 C000 FFE5      00073         MOVFF   r0x08, POSTDEC1
00002C C000 FFE5      00074         MOVFF   r0x09, POSTDEC1
                      00075 ; ;ic:3: iTemp0 [k2 lr3:5 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _strlwr_str_1_37}[r0x00 r0x01 r0x02 ] = recv _strlwr [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* function ( char generic* fixed) fixed}
000030 0E02           00076         MOVLW   0x02
000032 CFDB F000      00077         MOVFF   PLUSW2, r0x00
000036 0E03           00078         MOVLW   0x03
000038 CFDB F000      00079         MOVFF   PLUSW2, r0x01
00003C 0E04           00080         MOVLW   0x04
00003E CFDB F000      00081         MOVFF   PLUSW2, r0x02
                      00082 ; ;ic:4:        iTemp1 [k4 lr4:24 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _strlwr_ret_1_38}[r0x03 r0x04 r0x05 ] := iTemp0 [k2 lr3:5 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _strlwr_str_1_37}[r0x00 r0x01 r0x02 ]
                      00083 ;       .line   35; string/strlwr.c     char *ret = str;
000042 C000 F000      00084         MOVFF   r0x00, r0x03
000046 C000 F000      00085         MOVFF   r0x01, r0x04
00004A C000 F000      00086         MOVFF   r0x02, r0x05
                      00087 ; ;ic:5:        iTemp15 [k21 lr5:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] := iTemp0 [k2 lr3:5 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _strlwr_str_1_37}[r0x00 r0x01 r0x02 ]
                      00088 ; ;ic:7:  _whilecontinue_0($1) :
                      00089 ; ;ic:8:        iTemp3 [k7 lr8:11 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ] = @[iTemp15 [k21 lr5:22 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] + 0x0 {const-unsigned-char literal}]
00004E                00090 _00105_DS_:
                      00091 ;       .line   37; string/strlwr.c     while (*str)
00004E C000 FFE9      00092         MOVFF   r0x00, FSR0L
000052 C000 FFF3      00093         MOVFF   r0x01, PRODL
000056 5000           00094         MOVF    r0x02, W
000058 EC00 F000      00095         CALL    __gptrget1
00005C 6E00           00096         MOVWF   r0x06
                      00097 ; ;ic:9:        if iTemp3 [k7 lr8:11 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ] == 0 goto _whilebreak_0($3)
00005E 5000           00098         MOVF    r0x06, W
000060 E000           00099         BZ      _00107_DS_
                      00100 ; ;ic:10:       iTemp4 [k8 lr10:20 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x07 r0x08 r0x09 ] := iTemp15 [k21 lr5:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ]
                      00101 ;       .line   39; string/strlwr.c     *str = tolower (*str);
000062 C000 F000      00102         MOVFF   r0x00, r0x07
000066 C000 F000      00103         MOVFF   r0x01, r0x08
00006A C000 F000      00104         MOVFF   r0x02, r0x09
                      00105 ; ;ic:11:       send iTemp3 [k7 lr8:11 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ]{argreg = 1}
                      00106 ; ;ic:12:       iTemp7 [k13 lr12:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x06 ] = call _isupper [k9 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char function ( unsigned-char fixed) fixed}
gpasm-0.14.1 (Aug 18 2017)   strlwr.asm         8-18-2017  19:22:20          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00006E 5000           00107         MOVF    r0x06, W
000070 6EE5           00108         MOVWF   POSTDEC1
000072 EC00 F000      00109         CALL    _isupper
000076 6E00           00110         MOVWF   r0x06
000078 52E6           00111         MOVF    POSTINC1, F
                      00112 ; ;ic:13:       if iTemp7 [k13 lr12:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x06 ] == 0 goto iTempLbl0($6)
00007A 5000           00113         MOVF    r0x06, W
00007C E000           00114         BZ      _00110_DS_
                      00115 ; ;ic:14:       iTemp10 [k16 lr14:15 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ] = @[iTemp15 [k21 lr5:22 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] + 0x0 {const-unsigned-char literal}]
00007E C000 FFE9      00116         MOVFF   r0x00, FSR0L
000082 C000 FFF3      00117         MOVFF   r0x01, PRODL
000086 5000           00118         MOVF    r0x02, W
000088 EC00 F000      00119         CALL    __gptrget1
00008C 6E00           00120         MOVWF   r0x06
                      00121 ; ;ic:15:       iTemp8 [k14 lr15:20 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x06 ] = iTemp10 [k16 lr14:15 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ] | 0x20 {char literal}
00008E 8A00           00122         BSF     r0x06, 5
                      00123 ; ;ic:16:        goto iTempLbl1($7)
000090 D000           00124         BRA     _00111_DS_
                      00125 ; ;ic:17:  iTempLbl0($6) :
                      00126 ; ;ic:18:       iTemp8 [k14 lr15:20 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x06 ] = @[iTemp15 [k21 lr5:22 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] + 0x0 {const-unsigned-char literal}]
000092                00127 _00110_DS_:
000092 C000 FFE9      00128         MOVFF   r0x00, FSR0L
000096 C000 FFF3      00129         MOVFF   r0x01, PRODL
00009A 5000           00130         MOVF    r0x02, W
00009C EC00 F000      00131         CALL    __gptrget1
0000A0 6E00           00132         MOVWF   r0x06
                      00133 ; ;ic:19:  iTempLbl1($7) :
                      00134 ; ;ic:20:       *(iTemp4 [k8 lr10:20 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x07 r0x08 r0x09 ]) := iTemp8 [k14 lr15:20 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x06 ]
0000A2                00135 _00111_DS_:
0000A2 C000 FFE5      00136         MOVFF   r0x06, POSTDEC1
0000A6 C000 FFE9      00137         MOVFF   r0x07, FSR0L
0000AA C000 FFF3      00138         MOVFF   r0x08, PRODL
0000AE 5000           00139         MOVF    r0x09, W
0000B0 EC00 F000      00140         CALL    __gptrput1
                      00141 ; ;ic:21:       iTemp15 [k21 lr5:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] = iTemp15 [k21 lr5:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] + 0x1 {const-unsigned-char literal}
                      00142 ;       .line   40; string/strlwr.c     str++;
0000B4 2A00           00143         INCF    r0x00, F
0000B6 E300           00144         BNC     _00105_DS_
0000B8 4A00           00145         INFSNZ  r0x01, F
0000BA 2A00           00146         INCF    r0x02, F
                      00147 ; ;ic:22:        goto _whilecontinue_0($1)
0000BC                00148 _00120_DS_:
0000BC D000           00149         BRA     _00105_DS_
                      00150 ; ;ic:23:  _whilebreak_0($3) :
                      00151 ; ;ic:24:       ret iTemp1 [k4 lr4:24 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _strlwr_ret_1_38}[r0x03 r0x04 r0x05 ]
0000BE                00152 _00107_DS_:
                      00153 ;       .line   43; string/strlwr.c     return ret;
0000BE C000 FFF4      00154         MOVFF   r0x05, PRODH
0000C2 C000 FFF3      00155         MOVFF   r0x04, PRODL
0000C6 5000           00156         MOVF    r0x03, W
                      00157 ; ;ic:25:  _return($4) :
                      00158 ; ;ic:26:       eproc _strlwr [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* function ( char generic* fixed) fixed}
0000C8 CFE4 F000      00159         MOVFF   PREINC1, r0x09
gpasm-0.14.1 (Aug 18 2017)   strlwr.asm         8-18-2017  19:22:20          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000CC CFE4 F000      00160         MOVFF   PREINC1, r0x08
0000D0 CFE4 F000      00161         MOVFF   PREINC1, r0x07
0000D4 CFE4 F000      00162         MOVFF   PREINC1, r0x06
0000D8 CFE4 F000      00163         MOVFF   PREINC1, r0x05
0000DC CFE4 F000      00164         MOVFF   PREINC1, r0x04
0000E0 CFE4 F000      00165         MOVFF   PREINC1, r0x03
0000E4 CFE4 F000      00166         MOVFF   PREINC1, r0x02
0000E8 CFE4 F000      00167         MOVFF   PREINC1, r0x01
0000EC CFE4 F000      00168         MOVFF   PREINC1, r0x00
0000F0 CFE4 FFD9      00169         MOVFF   PREINC1, FSR2L
0000F4 0012           00170         RETURN  
                      00171 
                      00172 
                      00173 
                      00174 ; Statistics:
                      00175 ; code size:      246 (0x00f6) bytes ( 0.19%)
                      00176 ;                 123 (0x007b) words
                      00177 ; udata size:       0 (0x0000) bytes ( 0.00%)
                      00178 ; access size:     10 (0x000a) bytes
                      00179 
                      00180 
                      00181         end
gpasm-0.14.1 (Aug 18 2017)   strlwr.asm         8-18-2017  19:22:20          PAGE  5


SYMBOL TABLE
  LABEL                             VALUE

FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
POSTINC1                          00000FE6
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00105_DS_                        0000004E
_00107_DS_                        000000BE
_00110_DS_                        00000092
_00111_DS_                        000000A2
_00120_DS_                        000000BC
__18F452                          00000001
__gptrget1                        00000000
__gptrput1                        00000000
_isupper                          00000000
_strlwr                           00000000
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

