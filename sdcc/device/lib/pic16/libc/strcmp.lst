gpasm-0.14.1 (Aug 18 2017)   strcmp.asm         8-18-2017  19:22:15          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;--------------------------------------------------------
                      00002 ; File Created by SDCC : free open source ANSI-C Compiler
                      00003 ; Version 3.2.0 #8004 (Aug 18 2017) (MINGW32)
                      00004 ; This file was generated Fri Aug 18 19:22:15 2017
                      00005 ;--------------------------------------------------------
                      00006 ; PIC16 port for the Microchip 16-bit core micros
                      00007 ;--------------------------------------------------------
                      00008         list    p=18f452
                      00009 
                      00010         radix dec
                      00011 
                      00012 ;--------------------------------------------------------
                      00013 ; public variables in this module
                      00014 ;--------------------------------------------------------
                      00015         global  _strcmp
                      00016 
                      00017 ;--------------------------------------------------------
                      00018 ; extern variables in this module
                      00019 ;--------------------------------------------------------
                      00020         extern  __gptrget1
                      00021 
                      00022 ;--------------------------------------------------------
                      00023 ;       Equates to used internal registers
                      00024 ;--------------------------------------------------------
  00000FD8            00025 STATUS  equ     0xfd8
  00000FE8            00026 WREG    equ     0xfe8
  00000FE9            00027 FSR0L   equ     0xfe9
  00000FE1            00028 FSR1L   equ     0xfe1
  00000FD9            00029 FSR2L   equ     0xfd9
  00000FE5            00030 POSTDEC1        equ     0xfe5
  00000FE4            00031 PREINC1 equ     0xfe4
  00000FDB            00032 PLUSW2  equ     0xfdb
  00000FF3            00033 PRODL   equ     0xff3
                      00034 
                      00035 
                      00036 ; Internal registers
                      00037 .registers      udata_ovr       0x0000
000000                00038 r0x00   res     1
000001                00039 r0x01   res     1
000002                00040 r0x02   res     1
000003                00041 r0x03   res     1
000004                00042 r0x04   res     1
000005                00043 r0x05   res     1
000006                00044 r0x06   res     1
000007                00045 r0x07   res     1
000008                00046 r0x08   res     1
000009                00047 r0x09   res     1
00000A                00048 r0x0a   res     1
                      00049 
                      00050 ;--------------------------------------------------------
                      00051 ; global & static initialisations
                      00052 ;--------------------------------------------------------
                      00053 ; I code from now on!
gpasm-0.14.1 (Aug 18 2017)   strcmp.asm         8-18-2017  19:22:15          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ; ; Starting pCode block
                      00055 ; ;ic:1:  _entry($11) :
                      00056 ; ;ic:2:        proc _strcmp [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int function ( char generic* fixed, char generic* fixed) fixed}
                      00057 S_strcmp__strcmp        code
000000                00058 _strcmp:
                      00059 ;       .line   32; string/strcmp.c     strcmp (char *asrc, char *adst)
000000 CFD9 FFE5      00060         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00061         MOVFF   FSR1L, FSR2L
000008 C000 FFE5      00062         MOVFF   r0x00, POSTDEC1
00000C C000 FFE5      00063         MOVFF   r0x01, POSTDEC1
000010 C000 FFE5      00064         MOVFF   r0x02, POSTDEC1
000014 C000 FFE5      00065         MOVFF   r0x03, POSTDEC1
000018 C000 FFE5      00066         MOVFF   r0x04, POSTDEC1
00001C C000 FFE5      00067         MOVFF   r0x05, POSTDEC1
000020 C000 FFE5      00068         MOVFF   r0x06, POSTDEC1
000024 C000 FFE5      00069         MOVFF   r0x07, POSTDEC1
000028 C000 FFE5      00070         MOVFF   r0x08, POSTDEC1
00002C C000 FFE5      00071         MOVFF   r0x09, POSTDEC1
000030 C000 FFE5      00072         MOVFF   r0x0a, POSTDEC1
                      00073 ; ;ic:3: iTemp12 [k17 lr3:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] = recv _strcmp [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int function ( char generic* fixed, char generic* fixed) fixed}
000034 0E02           00074         MOVLW   0x02
000036 CFDB F000      00075         MOVFF   PLUSW2, r0x00
00003A 0E03           00076         MOVLW   0x03
00003C CFDB F000      00077         MOVFF   PLUSW2, r0x01
000040 0E04           00078         MOVLW   0x04
000042 CFDB F000      00079         MOVFF   PLUSW2, r0x02
                      00080 ; ;ic:4: iTemp13 [k18 lr4:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] = recv _strcmp [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int function ( char generic* fixed, char generic* fixed) fixed}
000046 0E05           00081         MOVLW   0x05
000048 CFDB F000      00082         MOVFF   PLUSW2, r0x03
00004C 0E06           00083         MOVLW   0x06
00004E CFDB F000      00084         MOVFF   PLUSW2, r0x04
000052 0E07           00085         MOVLW   0x07
000054 CFDB F000      00086         MOVFF   PLUSW2, r0x05
                      00087 ; ;ic:6:  _whilecontinue_0($2) :
                      00088 ; ;ic:7:        iTemp4 [k9 lr7:8 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ] = @[iTemp12 [k17 lr3:17 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] + 0x0 {const-unsigned-char literal}]
000058                00089 _00106_DS_:
                      00090 ;       .line   36; string/strcmp.c     while (!(ret = *asrc - *adst) && *adst)
000058 C000 FFE9      00091         MOVFF   r0x00, FSR0L
00005C C000 FFF3      00092         MOVFF   r0x01, PRODL
000060 5000           00093         MOVF    r0x02, W
000062 EC00 F000      00094         CALL    __gptrget1
000066 6E00           00095         MOVWF   r0x06
                      00096 ; ;ic:8:        iTemp5 [k10 lr8:11 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}[r0x06 r0x07 ] = (int fixed)iTemp4 [k9 lr7:8 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ]
000068 6A00           00097         CLRF    r0x07
00006A BE00           00098         BTFSC   r0x06, 7
00006C 6800           00099         SETF    r0x07
                      00100 ; ;ic:9:        iTemp7 [k12 lr9:14 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x08 ] = @[iTemp13 [k18 lr4:17 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] + 0x0 {const-unsigned-char literal}]
00006E C000 FFE9      00101         MOVFF   r0x03, FSR0L
000072 C000 FFF3      00102         MOVFF   r0x04, PRODL
000076 5000           00103         MOVF    r0x05, W
000078 EC00 F000      00104         CALL    __gptrget1
00007C 6E00           00105         MOVWF   r0x08
                      00106 ; ;ic:10:       iTemp8 [k13 lr10:11 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}[r0x09 r0x0a ] = (int fixed)iTemp7 [k12 lr9:14 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x08 ]
gpasm-0.14.1 (Aug 18 2017)   strcmp.asm         8-18-2017  19:22:15          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00007E C000 F000      00107         MOVFF   r0x08, r0x09
000082 6A00           00108         CLRF    r0x0a
000084 BE00           00109         BTFSC   r0x08, 7
000086 6800           00110         SETF    r0x0a
                      00111 ; ;ic:11:       iTemp9 [k14 lr11:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}{ sir@ _strcmp_ret_1_29}[r0x06 r0x07 ] = iTemp5 [k10 lr8:11 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}[r0x06 r0x07 ] - iTemp8 [k13 lr10:11 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}[r0x09 r0x0a ]
000088 5000           00112         MOVF    r0x09, W
00008A 5E00           00113         SUBWF   r0x06, F
00008C 5000           00114         MOVF    r0x0a, W
00008E 5A00           00115         SUBWFB  r0x07, F
                      00116 ; ;ic:12:       iTemp2 [k6 lr12:28 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{int register}[r0x09 r0x0a ] := iTemp9 [k14 lr11:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}{ sir@ _strcmp_ret_1_29}[r0x06 r0x07 ]
000090 C000 F000      00117         MOVFF   r0x06, r0x09
000094 C000 F000      00118         MOVFF   r0x07, r0x0a
                      00119 ; ;ic:13:       if iTemp9 [k14 lr11:13 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}{ sir@ _strcmp_ret_1_29}[r0x06 r0x07 ] != 0 goto _whilebreak_0($4)
000098 5000           00120         MOVF    r0x06, W
00009A 1000           00121         IORWF   r0x07, W
00009C E100           00122         BNZ     _00108_DS_
                      00123 ; ;ic:14:       if iTemp7 [k12 lr9:14 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x08 ] == 0 goto _whilebreak_0($4)
00009E 5000           00124         MOVF    r0x08, W
0000A0 E000           00125         BZ      _00108_DS_
                      00126 ; ;ic:15:       iTemp12 [k17 lr3:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] = iTemp12 [k17 lr3:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] + 0x1 {const-unsigned-char literal}
                      00127 ;       .line   37; string/strcmp.c     ++asrc, ++adst;
0000A2 2A00           00128         INCF    r0x00, F
0000A4 E300           00129         BNC     _00127_DS_
0000A6 4A00           00130         INFSNZ  r0x01, F
0000A8 2A00           00131         INCF    r0x02, F
                      00132 ; ;ic:16:       iTemp13 [k18 lr4:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] = iTemp13 [k18 lr4:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] + 0x1 {const-unsigned-char literal}
0000AA                00133 _00127_DS_:
0000AA 2A00           00134         INCF    r0x03, F
0000AC E300           00135         BNC     _00106_DS_
0000AE 4A00           00136         INFSNZ  r0x04, F
0000B0 2A00           00137         INCF    r0x05, F
                      00138 ; ;ic:17:        goto _whilecontinue_0($2)
0000B2                00139 _00128_DS_:
0000B2 D000           00140         BRA     _00106_DS_
                      00141 ; ;ic:18:  _whilebreak_0($4) :
                      00142 ; ;ic:19:       iTemp14 [k19 lr19:20 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp2 [k6 lr12:28 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{int register}[r0x09 r0x0a ] < 0x0 {int literal}
0000B4                00143 _00108_DS_:
                      00144 ;       .line   39; string/strcmp.c     if (ret < 0)
0000B4 80D8           00145         BSF     STATUS, 0
0000B6 AE00           00146         BTFSS   r0x0a, 7
0000B8 90D8           00147         BCF     STATUS, 0
0000BA E300           00148         BNC     _00112_DS_
                      00149 ; ;ic:20:       if iTemp14 [k19 lr19:20 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_1($8)
                      00150 ; ;ic:21:       iTemp2 [k6 lr12:28 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{int register}[r0x09 r0x0a ] := 0xffffffff {int literal}
                      00151 ;       .line   40; string/strcmp.c     ret = -1 ;
0000BC 6800           00152         SETF    r0x09
0000BE 6800           00153         SETF    r0x0a
                      00154 ; ;ic:22:        goto _ifend_1($9)
0000C0 D000           00155         BRA     _00113_DS_
                      00156 ; ;ic:23:  _iffalse_1($8) :
                      00157 ; ;ic:24:       iTemp15 [k20 lr24:25 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp2 [k6 lr12:28 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{int register}[r0x09 r0x0a ] > 0x0 {int literal}
0000C2                00158 _00112_DS_:
                      00159 ;       .line   41; string/strcmp.c     else if (ret > 0)
gpasm-0.14.1 (Aug 18 2017)   strcmp.asm         8-18-2017  19:22:15          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000C2 5000           00160         MOVF    r0x0a, W
0000C4 0F80           00161         ADDLW   0x80
0000C6 0F80           00162         ADDLW   0x80
0000C8 E100           00163         BNZ     _00129_DS_
0000CA 0E01           00164         MOVLW   0x01
0000CC 5C00           00165         SUBWF   r0x09, W
0000CE                00166 _00129_DS_:
0000CE E300           00167         BNC     _00113_DS_
                      00168 ; ;ic:25:       if iTemp15 [k20 lr24:25 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _ifend_1($9)
                      00169 ; ;ic:26:       iTemp2 [k6 lr12:28 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{int register}[r0x09 r0x0a ] := 0x1 {int literal}
                      00170 ;       .line   42; string/strcmp.c     ret = 1 ;
0000D0 0E01           00171         MOVLW   0x01
0000D2 6E00           00172         MOVWF   r0x09
0000D4 6A00           00173         CLRF    r0x0a
                      00174 ; ;ic:27:  _ifend_1($9) :
                      00175 ; ;ic:28:       ret iTemp2 [k6 lr12:28 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{int register}[r0x09 r0x0a ]
0000D6                00176 _00113_DS_:
                      00177 ;       .line   44; string/strcmp.c     return ret;
0000D6 C000 FFF3      00178         MOVFF   r0x0a, PRODL
0000DA 5000           00179         MOVF    r0x09, W
                      00180 ; ;ic:29:  _return($10) :
                      00181 ; ;ic:30:       eproc _strcmp [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int function ( char generic* fixed, char generic* fixed) fixed}
0000DC CFE4 F000      00182         MOVFF   PREINC1, r0x0a
0000E0 CFE4 F000      00183         MOVFF   PREINC1, r0x09
0000E4 CFE4 F000      00184         MOVFF   PREINC1, r0x08
0000E8 CFE4 F000      00185         MOVFF   PREINC1, r0x07
0000EC CFE4 F000      00186         MOVFF   PREINC1, r0x06
0000F0 CFE4 F000      00187         MOVFF   PREINC1, r0x05
0000F4 CFE4 F000      00188         MOVFF   PREINC1, r0x04
0000F8 CFE4 F000      00189         MOVFF   PREINC1, r0x03
0000FC CFE4 F000      00190         MOVFF   PREINC1, r0x02
000100 CFE4 F000      00191         MOVFF   PREINC1, r0x01
000104 CFE4 F000      00192         MOVFF   PREINC1, r0x00
000108 CFE4 FFD9      00193         MOVFF   PREINC1, FSR2L
00010C 0012           00194         RETURN  
                      00195 
                      00196 
                      00197 
                      00198 ; Statistics:
                      00199 ; code size:      270 (0x010e) bytes ( 0.21%)
                      00200 ;                 135 (0x0087) words
                      00201 ; udata size:       0 (0x0000) bytes ( 0.00%)
                      00202 ; access size:     11 (0x000b) bytes
                      00203 
                      00204 
                      00205         end
gpasm-0.14.1 (Aug 18 2017)   strcmp.asm         8-18-2017  19:22:15          PAGE  5


SYMBOL TABLE
  LABEL                             VALUE

FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00106_DS_                        00000058
_00108_DS_                        000000B4
_00112_DS_                        000000C2
_00113_DS_                        000000D6
_00127_DS_                        000000AA
_00128_DS_                        000000B2
_00129_DS_                        000000CE
__18F452                          00000001
__gptrget1                        00000000
_strcmp                           00000000
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009
r0x0a                             0000000A

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

