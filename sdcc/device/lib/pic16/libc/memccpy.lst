gpasm-0.14.1 (Aug 18 2017)   memccpy.asm        8-18-2017  19:22:02          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;--------------------------------------------------------
                      00002 ; File Created by SDCC : free open source ANSI-C Compiler
                      00003 ; Version 3.2.0 #8004 (Aug 18 2017) (MINGW32)
                      00004 ; This file was generated Fri Aug 18 19:22:02 2017
                      00005 ;--------------------------------------------------------
                      00006 ; PIC16 port for the Microchip 16-bit core micros
                      00007 ;--------------------------------------------------------
                      00008         list    p=18f452
                      00009 
                      00010         radix dec
                      00011 
                      00012 ;--------------------------------------------------------
                      00013 ; public variables in this module
                      00014 ;--------------------------------------------------------
                      00015         global  _memccpy
                      00016 
                      00017 ;--------------------------------------------------------
                      00018 ; extern variables in this module
                      00019 ;--------------------------------------------------------
                      00020         extern  __gptrget1
                      00021         extern  __gptrput1
                      00022 
                      00023 ;--------------------------------------------------------
                      00024 ;       Equates to used internal registers
                      00025 ;--------------------------------------------------------
  00000FD8            00026 STATUS  equ     0xfd8
  00000FE8            00027 WREG    equ     0xfe8
  00000FE9            00028 FSR0L   equ     0xfe9
  00000FE1            00029 FSR1L   equ     0xfe1
  00000FD9            00030 FSR2L   equ     0xfd9
  00000FE5            00031 POSTDEC1        equ     0xfe5
  00000FE4            00032 PREINC1 equ     0xfe4
  00000FDB            00033 PLUSW2  equ     0xfdb
  00000FF3            00034 PRODL   equ     0xff3
  00000FF4            00035 PRODH   equ     0xff4
                      00036 
                      00037 
                      00038 ; Internal registers
                      00039 .registers      udata_ovr       0x0000
000000                00040 r0x00   res     1
000001                00041 r0x01   res     1
000002                00042 r0x02   res     1
000003                00043 r0x03   res     1
000004                00044 r0x04   res     1
000005                00045 r0x05   res     1
000006                00046 r0x06   res     1
000007                00047 r0x07   res     1
000008                00048 r0x08   res     1
000009                00049 r0x09   res     1
00000A                00050 r0x0a   res     1
00000B                00051 r0x0b   res     1
00000C                00052 r0x0c   res     1
00000D                00053 r0x0d   res     1
gpasm-0.14.1 (Aug 18 2017)   memccpy.asm        8-18-2017  19:22:02          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00000E                00054 r0x0e   res     1
00000F                00055 r0x0f   res     1
                      00056 
                      00057 ;--------------------------------------------------------
                      00058 ; global & static initialisations
                      00059 ;--------------------------------------------------------
                      00060 ; I code from now on!
                      00061 ; ; Starting pCode block
                      00062 ; ;ic:1:  _entry($7) :
                      00063 ; ;ic:2:        proc _memccpy [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, void generic* fixed, char fixed, unsigned-int fixed) fixed}
                      00064 S_memccpy__memccpy      code
000000                00065 _memccpy:
                      00066 ;       .line   33; string/memccpy.c    memccpy (void *dst, void *src, char c, size_t acount) 
000000 CFD9 FFE5      00067         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00068         MOVFF   FSR1L, FSR2L
000008 C000 FFE5      00069         MOVFF   r0x00, POSTDEC1
00000C C000 FFE5      00070         MOVFF   r0x01, POSTDEC1
000010 C000 FFE5      00071         MOVFF   r0x02, POSTDEC1
000014 C000 FFE5      00072         MOVFF   r0x03, POSTDEC1
000018 C000 FFE5      00073         MOVFF   r0x04, POSTDEC1
00001C C000 FFE5      00074         MOVFF   r0x05, POSTDEC1
000020 C000 FFE5      00075         MOVFF   r0x06, POSTDEC1
000024 C000 FFE5      00076         MOVFF   r0x07, POSTDEC1
000028 C000 FFE5      00077         MOVFF   r0x08, POSTDEC1
00002C C000 FFE5      00078         MOVFF   r0x09, POSTDEC1
000030 C000 FFE5      00079         MOVFF   r0x0a, POSTDEC1
000034 C000 FFE5      00080         MOVFF   r0x0b, POSTDEC1
000038 C000 FFE5      00081         MOVFF   r0x0c, POSTDEC1
00003C C000 FFE5      00082         MOVFF   r0x0d, POSTDEC1
000040 C000 FFE5      00083         MOVFF   r0x0e, POSTDEC1
000044 C000 FFE5      00084         MOVFF   r0x0f, POSTDEC1
                      00085 ; ;ic:3: iTemp0 [k2 lr3:7 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void generic* fixed}{ sir@ _memccpy_dst_1_28}[r0x00 r0x01 r0x02 ] = recv _memccpy [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, void generic* fixed, char fixed, unsigned-int fixed) fixed}
000048 0E02           00086         MOVLW   0x02
00004A CFDB F000      00087         MOVFF   PLUSW2, r0x00
00004E 0E03           00088         MOVLW   0x03
000050 CFDB F000      00089         MOVFF   PLUSW2, r0x01
000054 0E04           00090         MOVLW   0x04
000056 CFDB F000      00091         MOVFF   PLUSW2, r0x02
                      00092 ; ;ic:4: iTemp1 [k4 lr4:8 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void generic* fixed}{ sir@ _memccpy_src_1_28}[r0x03 r0x04 r0x05 ] = recv _memccpy [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, void generic* fixed, char fixed, unsigned-int fixed) fixed}
00005A 0E05           00093         MOVLW   0x05
00005C CFDB F000      00094         MOVFF   PLUSW2, r0x03
000060 0E06           00095         MOVLW   0x06
000062 CFDB F000      00096         MOVFF   PLUSW2, r0x04
000066 0E07           00097         MOVLW   0x07
000068 CFDB F000      00098         MOVFF   PLUSW2, r0x05
                      00099 ; ;ic:5: iTemp2 [k6 lr5:27 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _memccpy_c_1_28}[r0x06 ] = recv _memccpy [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, void generic* fixed, char fixed, unsigned-int fixed) fixed}
00006C 0E08           00100         MOVLW   0x08
00006E CFDB F000      00101         MOVFF   PLUSW2, r0x06
                      00102 ; ;ic:6: iTemp9 [k17 lr6:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x07 r0x08 ] = recv _memccpy [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, void generic* fixed, char fixed, unsigned-int fixed) fixed}
000072 0E09           00103         MOVLW   0x09
000074 CFDB F000      00104         MOVFF   PLUSW2, r0x07
000078 0E0A           00105         MOVLW   0x0a
                      00106 ;       .line   35; string/memccpy.c    char *d = dst;
gpasm-0.14.1 (Aug 18 2017)   memccpy.asm        8-18-2017  19:22:02          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00007A CFDB F000      00107         MOVFF   PLUSW2, r0x08
                      00108 ; ;ic:7:        iTemp16 [k24 lr7:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] = (char generic* fixed)iTemp0 [k2 lr3:7 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void generic* fixed}{ sir@ _memccpy_dst_1_28}[r0x00 r0x01 r0x02 ]
                      00109 ; #     MOVF    r0x02, W
                      00110 ; #     MOVWF   r0x02
                      00111 ; #     MOVF    r0x02, W
                      00112 ; #     MOVF    r0x01, W
                      00113 ; #     MOVF    r0x01, W
                      00114 ; #     MOVWF   r0x01
                      00115 ; #     MOVF    r0x01, W
                      00116 ; #     MOVF    r0x00, W
                      00117 ; #     MOVF    r0x00, W
                      00118 ; #     MOVWF   r0x00
                      00119 ; #;;ic:8:      iTemp6 [k13 lr8:27 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _memccpy_s_1_29}[r0x03 r0x04 r0x05 ] = (char generic* fixed)iTemp1 [k4 lr4:8 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void generic* fixed}{ sir@ _memccpy_src_1_28}[r0x03 r0x04 r0x05 ]
                      00120 ; #     MOVF    r0x00, W
                      00121 ; #     MOVF    r0x05, W
                      00122 ; #     MOVF    r0x05, W
                      00123 ; #     MOVWF   r0x05
                      00124 ; #     MOVF    r0x05, W
                      00125 ; #     MOVF    r0x04, W
                      00126 ; #     MOVF    r0x04, W
                      00127 ; #     MOVWF   r0x04
                      00128 ; #     MOVF    r0x04, W
                      00129 ; #     MOVF    r0x03, W
                      00130 ; #     MOVF    r0x03, W
                      00131 ; #     MOVWF   r0x03
                      00132 ; #;;ic:9:      iTemp18 [k26 lr9:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x09 r0x0a r0x0b ] := iTemp6 [k13 lr8:27 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _memccpy_s_1_29}[r0x03 r0x04 r0x05 ]
                      00133 ;       .line   36; string/memccpy.c    char *s = src;
00007E C000 F000      00134         MOVFF   r0x03, r0x09
000082 C000 F000      00135         MOVFF   r0x04, r0x0a
000086 C000 F000      00136         MOVFF   r0x05, r0x0b
                      00137 ; ;ic:11:  _whilecontinue_0($3) :
                      00138 ; ;ic:12:       iTemp8 [k16 lr12:14 so:0]{ ia0 a2p0 re0 rm0 nos1 ru0 dp0}{unsigned-int fixed}[r0x0c r0x0d ] := iTemp9 [k17 lr6:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x07 r0x08 ]
00008A                00139 _00107_DS_:
00008A C000 F000      00140         MOVFF   r0x07, r0x0c
00008E C000 F000      00141         MOVFF   r0x08, r0x0d
                      00142 ; ;ic:13:       iTemp9 [k17 lr6:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x07 r0x08 ] = iTemp9 [k17 lr6:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x07 r0x08 ] - 0x1 {const-unsigned-char literal}
000092 0EFF           00143         MOVLW   0xff
000094 2600           00144         ADDWF   r0x07, F
000096 2200           00145         ADDWFC  r0x08, F
                      00146 ; ;ic:14:       if iTemp8 [k16 lr12:14 so:0]{ ia0 a2p0 re0 rm0 nos1 ru0 dp0}{unsigned-int fixed}[r0x0c r0x0d ] == 0 goto _whilebreak_0($5)
000098 5000           00147         MOVF    r0x0c, W
00009A 1000           00148         IORWF   r0x0d, W
00009C E000           00149         BZ      _00109_DS_
                      00150 ; ;ic:15:       iTemp11 [k19 lr15:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0c ] = @[iTemp18 [k26 lr9:27 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x09 r0x0a r0x0b ] + 0x0 {const-unsigned-char literal}]
                      00151 ;       .line   43; string/memccpy.c    if (*s == c)
00009E C000 FFE9      00152         MOVFF   r0x09, FSR0L
0000A2 C000 FFF3      00153         MOVFF   r0x0a, PRODL
0000A6 5000           00154         MOVF    r0x0b, W
0000A8 EC00 F000      00155         CALL    __gptrget1
                      00156 ; #     MOVWF   r0x0c
                      00157 ; #;;ic:16:     iTemp12 [k20 lr16:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp11 [k19 lr15:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0c ] == iTemp2 [k6 lr5:27 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _memccpy_c_1_28}[r0x06 ]
                      00158 ; #     MOVF    r0x0c, W
0000AC 6E00           00159         MOVWF   r0x0c
gpasm-0.14.1 (Aug 18 2017)   memccpy.asm        8-18-2017  19:22:02          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000AE 1800           00160         XORWF   r0x06, W
0000B0 E100           00161         BNZ     _00106_DS_
                      00162 ; ;ic:17:       if iTemp12 [k20 lr16:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_0($2)
                      00163 ; ;ic:18:       iTemp6 [k13 lr8:27 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _memccpy_s_1_29}[r0x03 r0x04 r0x05 ] = iTemp6 [k13 lr8:27 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _memccpy_s_1_29}[r0x03 r0x04 r0x05 ] + 0x1 {const-unsigned-char literal}
                      00164 ;       .line   44; string/memccpy.c    return ++s;
0000B2 2A00           00165         INCF    r0x03, F
0000B4 E300           00166         BNC     _00120_DS_
0000B6 4A00           00167         INFSNZ  r0x04, F
0000B8 2A00           00168         INCF    r0x05, F
                      00169 ; ;ic:19:       iTemp14 [k22 lr19:20 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* fixed}[r0x0d r0x0e r0x0f ] = (void generic* fixed)iTemp6 [k13 lr8:27 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _memccpy_s_1_29}[r0x03 r0x04 r0x05 ]
0000BA                00170 _00120_DS_:
0000BA 5000           00171         MOVF    r0x05, W
0000BC 6E00           00172         MOVWF   r0x0f
0000BE 5000           00173         MOVF    r0x04, W
0000C0 6E00           00174         MOVWF   r0x0e
0000C2 5000           00175         MOVF    r0x03, W
                      00176 ; ;ic:20:       ret iTemp14 [k22 lr19:20 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* fixed}[r0x0d r0x0e r0x0f ]
0000C4 C000 FFF4      00177         MOVFF   r0x0f, PRODH
0000C8 C000 FFF3      00178         MOVFF   r0x0e, PRODL
0000CC D000           00179         BRA     _00110_DS_
                      00180 ; ;ic:21:  _iffalse_0($2) :
                      00181 ; ;ic:22:       iTemp19 [k27 lr22:25 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0c ] := iTemp11 [k19 lr15:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0c ]
                      00182 ; ;ic:23:       iTemp18 [k26 lr9:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x09 r0x0a r0x0b ] = iTemp18 [k26 lr9:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x09 r0x0a r0x0b ] + 0x1 {const-unsigned-char literal}
0000CE                00183 _00106_DS_:
                      00184 ;       .line   46; string/memccpy.c    *d++ = *s++;
0000CE 2A00           00185         INCF    r0x09, F
0000D0 E300           00186         BNC     _00121_DS_
0000D2 4A00           00187         INFSNZ  r0x0a, F
0000D4 2A00           00188         INCF    r0x0b, F
                      00189 ; ;ic:24:       iTemp6 [k13 lr8:27 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _memccpy_s_1_29}[r0x03 r0x04 r0x05 ] := iTemp18 [k26 lr9:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x09 r0x0a r0x0b ]
0000D6                00190 _00121_DS_:
0000D6 C000 F000      00191         MOVFF   r0x09, r0x03
0000DA C000 F000      00192         MOVFF   r0x0a, r0x04
0000DE C000 F000      00193         MOVFF   r0x0b, r0x05
                      00194 ; ;ic:25:       *(iTemp16 [k24 lr7:27 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ]) := iTemp19 [k27 lr22:25 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0c ]
0000E2 C000 FFE5      00195         MOVFF   r0x0c, POSTDEC1
0000E6 C000 FFE9      00196         MOVFF   r0x00, FSR0L
0000EA C000 FFF3      00197         MOVFF   r0x01, PRODL
0000EE 5000           00198         MOVF    r0x02, W
0000F0 EC00 F000      00199         CALL    __gptrput1
                      00200 ; ;ic:26:       iTemp16 [k24 lr7:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] = iTemp16 [k24 lr7:27 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x00 r0x01 r0x02 ] + 0x1 {const-unsigned-char literal}
0000F4 2A00           00201         INCF    r0x00, F
0000F6 E300           00202         BNC     _00122_DS_
0000F8 4A00           00203         INFSNZ  r0x01, F
0000FA 2A00           00204         INCF    r0x02, F
                      00205 ; ;ic:27:        goto _whilecontinue_0($3)
0000FC                00206 _00122_DS_:
0000FC D000           00207         BRA     _00107_DS_
                      00208 ; ;ic:28:  _whilebreak_0($5) :
                      00209 ; ;ic:29:       ret 0x0 {void generic* literal}
0000FE                00210 _00109_DS_:
                      00211 ;       .line   49; string/memccpy.c    return NULL;
0000FE 6AF4           00212         CLRF    PRODH
gpasm-0.14.1 (Aug 18 2017)   memccpy.asm        8-18-2017  19:22:02          PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000100 6AF3           00213         CLRF    PRODL
000102 6AE8           00214         CLRF    WREG
                      00215 ; ;ic:30:  _return($6) :
                      00216 ; ;ic:31:       eproc _memccpy [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void generic* function ( void generic* fixed, void generic* fixed, char fixed, unsigned-int fixed) fixed}
000104                00217 _00110_DS_:
000104 CFE4 F000      00218         MOVFF   PREINC1, r0x0f
000108 CFE4 F000      00219         MOVFF   PREINC1, r0x0e
00010C CFE4 F000      00220         MOVFF   PREINC1, r0x0d
000110 CFE4 F000      00221         MOVFF   PREINC1, r0x0c
000114 CFE4 F000      00222         MOVFF   PREINC1, r0x0b
000118 CFE4 F000      00223         MOVFF   PREINC1, r0x0a
00011C CFE4 F000      00224         MOVFF   PREINC1, r0x09
000120 CFE4 F000      00225         MOVFF   PREINC1, r0x08
000124 CFE4 F000      00226         MOVFF   PREINC1, r0x07
000128 CFE4 F000      00227         MOVFF   PREINC1, r0x06
00012C CFE4 F000      00228         MOVFF   PREINC1, r0x05
000130 CFE4 F000      00229         MOVFF   PREINC1, r0x04
000134 CFE4 F000      00230         MOVFF   PREINC1, r0x03
000138 CFE4 F000      00231         MOVFF   PREINC1, r0x02
00013C CFE4 F000      00232         MOVFF   PREINC1, r0x01
000140 CFE4 F000      00233         MOVFF   PREINC1, r0x00
000144 CFE4 FFD9      00234         MOVFF   PREINC1, FSR2L
000148 0012           00235         RETURN  
                      00236 
                      00237 
                      00238 
                      00239 ; Statistics:
                      00240 ; code size:      330 (0x014a) bytes ( 0.25%)
                      00241 ;                 165 (0x00a5) words
                      00242 ; udata size:       0 (0x0000) bytes ( 0.00%)
                      00243 ; access size:     16 (0x0010) bytes
                      00244 
                      00245 
                      00246         end
gpasm-0.14.1 (Aug 18 2017)   memccpy.asm        8-18-2017  19:22:02          PAGE  6


SYMBOL TABLE
  LABEL                             VALUE

FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00106_DS_                        000000CE
_00107_DS_                        0000008A
_00109_DS_                        000000FE
_00110_DS_                        00000104
_00120_DS_                        000000BA
_00121_DS_                        000000D6
_00122_DS_                        000000FC
__18F452                          00000001
__gptrget1                        00000000
__gptrput1                        00000000
_memccpy                          00000000
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009
r0x0a                             0000000A
r0x0b                             0000000B
r0x0c                             0000000C
r0x0d                             0000000D
r0x0e                             0000000E
r0x0f                             0000000F

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

