gpasm-0.14.1 (Aug 18 2017)   memchrram.asm      8-18-2017  19:22:05          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;--------------------------------------------------------
                      00002 ; File Created by SDCC : free open source ANSI-C Compiler
                      00003 ; Version 3.2.0 #8004 (Aug 18 2017) (MINGW32)
                      00004 ; This file was generated Fri Aug 18 19:22:04 2017
                      00005 ;--------------------------------------------------------
                      00006 ; PIC16 port for the Microchip 16-bit core micros
                      00007 ;--------------------------------------------------------
                      00008         list    p=18f452
                      00009 
                      00010         radix dec
                      00011 
                      00012 ;--------------------------------------------------------
                      00013 ; public variables in this module
                      00014 ;--------------------------------------------------------
                      00015         global  _memchrram
                      00016 
                      00017 ;--------------------------------------------------------
                      00018 ;       Equates to used internal registers
                      00019 ;--------------------------------------------------------
  00000FD8            00020 STATUS  equ     0xfd8
  00000FE8            00021 WREG    equ     0xfe8
  00000FE9            00022 FSR0L   equ     0xfe9
  00000FEA            00023 FSR0H   equ     0xfea
  00000FE1            00024 FSR1L   equ     0xfe1
  00000FD9            00025 FSR2L   equ     0xfd9
  00000FEF            00026 INDF0   equ     0xfef
  00000FE5            00027 POSTDEC1        equ     0xfe5
  00000FE4            00028 PREINC1 equ     0xfe4
  00000FDB            00029 PLUSW2  equ     0xfdb
  00000FF3            00030 PRODL   equ     0xff3
                      00031 
                      00032 
                      00033 ; Internal registers
                      00034 .registers      udata_ovr       0x0000
000000                00035 r0x00   res     1
000001                00036 r0x01   res     1
000002                00037 r0x02   res     1
000003                00038 r0x03   res     1
000004                00039 r0x04   res     1
000005                00040 r0x05   res     1
000006                00041 r0x06   res     1
000007                00042 r0x07   res     1
                      00043 
                      00044 ;--------------------------------------------------------
                      00045 ; global & static initialisations
                      00046 ;--------------------------------------------------------
                      00047 ; I code from now on!
                      00048 ; ; Starting pCode block
                      00049 ; ;ic:1:  _entry($11) :
                      00050 ; ;ic:2:        proc _memchrram [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void near* function ( void near* fixed, char fixed, unsigned-int fixed) data}
                      00051 S_memchrram__memchrram  code
000000                00052 _memchrram:
                      00053 ;       .line   33; string/memchrram.c  memchrram (__data void *s, char c, size_t count)
gpasm-0.14.1 (Aug 18 2017)   memchrram.asm      8-18-2017  19:22:05          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000000 CFD9 FFE5      00054         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00055         MOVFF   FSR1L, FSR2L
000008 C000 FFE5      00056         MOVFF   r0x00, POSTDEC1
00000C C000 FFE5      00057         MOVFF   r0x01, POSTDEC1
000010 C000 FFE5      00058         MOVFF   r0x02, POSTDEC1
000014 C000 FFE5      00059         MOVFF   r0x03, POSTDEC1
000018 C000 FFE5      00060         MOVFF   r0x04, POSTDEC1
00001C C000 FFE5      00061         MOVFF   r0x05, POSTDEC1
000020 C000 FFE5      00062         MOVFF   r0x06, POSTDEC1
000024 C000 FFE5      00063         MOVFF   r0x07, POSTDEC1
                      00064 ; ;ic:3: iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void near* fixed}{ sir@ _memchrram_s_1_28}[r0x00 r0x01 ] = recv _memchrram [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void near* function ( void near* fixed, char fixed, unsigned-int fixed) data}
000028 0E02           00065         MOVLW   0x02
00002A CFDB F000      00066         MOVFF   PLUSW2, r0x00
00002E 0E03           00067         MOVLW   0x03
000030 CFDB F000      00068         MOVFF   PLUSW2, r0x01
                      00069 ; ;ic:4: iTemp1 [k4 lr4:20 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _memchrram_c_1_28}[r0x02 ] = recv _memchrram [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void near* function ( void near* fixed, char fixed, unsigned-int fixed) data}
000034 0E04           00070         MOVLW   0x04
000036 CFDB F000      00071         MOVFF   PLUSW2, r0x02
                      00072 ; ;ic:5: iTemp2 [k6 lr5:9 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-int fixed}{ sir@ _memchrram_count_1_28}[r0x03 r0x04 ] = recv _memchrram [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void near* function ( void near* fixed, char fixed, unsigned-int fixed) data}
00003A 0E05           00073         MOVLW   0x05
00003C CFDB F000      00074         MOVFF   PLUSW2, r0x03
000040 0E06           00075         MOVLW   0x06
000042 CFDB F000      00076         MOVFF   PLUSW2, r0x04
                      00077 ; ;ic:6:        if iTemp2 [k6 lr5:9 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-int fixed}{ sir@ _memchrram_count_1_28}[r0x03 r0x04 ] != 0 goto preHeaderLbl0($15)
                      00078 ;       .line   35; string/memchrram.c  if (!count)
000046 5000           00079         MOVF    r0x03, W
000048 1000           00080         IORWF   r0x04, W
00004A E100           00081         BNZ     _00108_DS_
                      00082 ; ;ic:7:        ret 0x0 {void near* literal}
                      00083 ;       .line   36; string/memchrram.c  return NULL;
00004C 6AF3           00084         CLRF    PRODL
00004E 6AE8           00085         CLRF    WREG
000050 D000           00086         BRA     _00114_DS_
                      00087 ; ;ic:8:  preHeaderLbl0($15) :
                      00088 ; ;ic:9:        iTemp9 [k14 lr9:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x03 r0x04 ] := iTemp2 [k6 lr5:9 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-int fixed}{ sir@ _memchrram_count_1_28}[r0x03 r0x04 ]
                      00089 ; ;ic:11:  _whilecontinue_0($4) :
                      00090 ; ;ic:12:       iTemp3 [k8 lr12:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* fixed}[r0x05 r0x06 ] = (char near* fixed)iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void near* fixed}{ sir@ _memchrram_s_1_28}[r0x00 r0x01 ]
000052                00091 _00108_DS_:
                      00092 ;       .line   38; string/memchrram.c  while ((*(__data char *)s != c) && count)
000052 5000           00093         MOVF    r0x00, W
000054 6E00           00094         MOVWF   r0x05
000056 5000           00095         MOVF    r0x01, W
000058 6E00           00096         MOVWF   r0x06
                      00097 ; ;ic:13:       iTemp4 [k9 lr13:14 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x07 ] = @[iTemp3 [k8 lr12:17 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char near* fixed}[r0x05 r0x06 ] + 0x0 {const-unsigned-char literal}]
00005A C000 FFE9      00098         MOVFF   r0x05, FSR0L
00005E C000 FFEA      00099         MOVFF   r0x06, FSR0H
000062 CFEF F000      00100         MOVFF   INDF0, r0x07
                      00101 ; ;ic:14:       iTemp5 [k10 lr14:15 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp4 [k9 lr13:14 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x07 ] == iTemp1 [k4 lr4:20 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _memchrram_c_1_28}[r0x02 ]
000066 5000           00102         MOVF    r0x07, W
000068 1800           00103         XORWF   r0x02, W
00006A E000           00104         BZ      _00110_DS_
                      00105 ; ;ic:15:       if iTemp5 [k10 lr14:15 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} != 0 goto _whilebreak_0($6)
                      00106 ; ;ic:16:       if iTemp9 [k14 lr9:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x03 r0x04 ] == 0 goto _whilebreak_0($6)
gpasm-0.14.1 (Aug 18 2017)   memchrram.asm      8-18-2017  19:22:05          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00006C 5000           00107         MOVF    r0x03, W
00006E 1000           00108         IORWF   r0x04, W
000070 E000           00109         BZ      _00110_DS_
                      00110 ; ;ic:17:       iTemp7 [k12 lr17:18 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* fixed}[r0x05 r0x06 ] = iTemp3 [k8 lr12:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* fixed}[r0x05 r0x06 ] + 0x2 {const-unsigned-char literal}
                      00111 ;       .line   40; string/memchrram.c  s = (__data char *)s + sizeof (__data char *);
000072 0E02           00112         MOVLW   0x02
000074 2600           00113         ADDWF   r0x05, F
000076 B0D8           00114         BTFSC   STATUS, 0
000078 2A00           00115         INCF    r0x06, F
                      00116 ; ;ic:18:       iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void near* fixed}{ sir@ _memchrram_s_1_28}[r0x00 r0x01 ] = (void near* fixed)iTemp7 [k12 lr17:18 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char near* fixed}[r0x05 r0x06 ]
00007A 5000           00117         MOVF    r0x05, W
00007C 6E00           00118         MOVWF   r0x00
00007E 5000           00119         MOVF    r0x06, W
000080 6E00           00120         MOVWF   r0x01
                      00121 ; ;ic:19:       iTemp9 [k14 lr9:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x03 r0x04 ] = iTemp9 [k14 lr9:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x03 r0x04 ] - 0x1 {const-unsigned-char literal}
                      00122 ;       .line   41; string/memchrram.c  --count;
000082 0EFF           00123         MOVLW   0xff
000084 2600           00124         ADDWF   r0x03, F
000086 2200           00125         ADDWFC  r0x04, F
                      00126 ; ;ic:20:        goto _whilecontinue_0($4)
000088 D000           00127         BRA     _00108_DS_
                      00128 ; ;ic:21:  _whilebreak_0($6) :
                      00129 ; ;ic:22:       if iTemp9 [k14 lr9:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x03 r0x04 ] == 0 goto _iffalse_1($8)
00008A                00130 _00110_DS_:
                      00131 ;       .line   44; string/memchrram.c  if (count)
00008A 5000           00132         MOVF    r0x03, W
00008C 1000           00133         IORWF   r0x04, W
00008E E000           00134         BZ      _00112_DS_
                      00135 ; ;ic:23:       ret iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{void near* fixed}{ sir@ _memchrram_s_1_28}[r0x00 r0x01 ]
                      00136 ;       .line   45; string/memchrram.c  return s;
000090 C000 FFF3      00137         MOVFF   r0x01, PRODL
000094 5000           00138         MOVF    r0x00, W
000096 D000           00139         BRA     _00114_DS_
                      00140 ; ;ic:24:  _iffalse_1($8) :
                      00141 ; ;ic:25:       ret 0x0 {void near* literal}
000098                00142 _00112_DS_:
                      00143 ;       .line   47; string/memchrram.c  return NULL;
000098 6AF3           00144         CLRF    PRODL
00009A 6AE8           00145         CLRF    WREG
                      00146 ; ;ic:26:  _return($10) :
                      00147 ; ;ic:27:       eproc _memchrram [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void near* function ( void near* fixed, char fixed, unsigned-int fixed) data}
00009C                00148 _00114_DS_:
00009C CFE4 F000      00149         MOVFF   PREINC1, r0x07
0000A0 CFE4 F000      00150         MOVFF   PREINC1, r0x06
0000A4 CFE4 F000      00151         MOVFF   PREINC1, r0x05
0000A8 CFE4 F000      00152         MOVFF   PREINC1, r0x04
0000AC CFE4 F000      00153         MOVFF   PREINC1, r0x03
0000B0 CFE4 F000      00154         MOVFF   PREINC1, r0x02
0000B4 CFE4 F000      00155         MOVFF   PREINC1, r0x01
0000B8 CFE4 F000      00156         MOVFF   PREINC1, r0x00
0000BC CFE4 FFD9      00157         MOVFF   PREINC1, FSR2L
0000C0 0012           00158         RETURN  
                      00159 
gpasm-0.14.1 (Aug 18 2017)   memchrram.asm      8-18-2017  19:22:05          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00160 
                      00161 
                      00162 ; Statistics:
                      00163 ; code size:      194 (0x00c2) bytes ( 0.15%)
                      00164 ;                  97 (0x0061) words
                      00165 ; udata size:       0 (0x0000) bytes ( 0.00%)
                      00166 ; access size:      8 (0x0008) bytes
                      00167 
                      00168 
                      00169         end
gpasm-0.14.1 (Aug 18 2017)   memchrram.asm      8-18-2017  19:22:05          PAGE  5


SYMBOL TABLE
  LABEL                             VALUE

FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
INDF0                             00000FEF
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00108_DS_                        00000052
_00110_DS_                        0000008A
_00112_DS_                        00000098
_00114_DS_                        0000009C
__18F452                          00000001
_memchrram                        00000000
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

