gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;--------------------------------------------------------
                      00002 ; File Created by SDCC : free open source ANSI-C Compiler
                      00003 ; Version 3.2.0 #8004 (Aug 18 2017) (MINGW32)
                      00004 ; This file was generated Fri Aug 18 19:21:47 2017
                      00005 ;--------------------------------------------------------
                      00006 ; PIC16 port for the Microchip 16-bit core micros
                      00007 ;--------------------------------------------------------
                      00008         list    p=18f452
                      00009 
                      00010         radix dec
                      00011 
                      00012 ;--------------------------------------------------------
                      00013 ; public variables in this module
                      00014 ;--------------------------------------------------------
                      00015         global  _atof
                      00016 
                      00017 ;--------------------------------------------------------
                      00018 ; extern variables in this module
                      00019 ;--------------------------------------------------------
                      00020         extern  __gptrget1
                      00021         extern  _isdigit
                      00022         extern  _islower
                      00023         extern  _isspace
                      00024         extern  _atoi
                      00025         extern  ___fsmul
                      00026         extern  ___sint2fs
                      00027         extern  ___fsadd
                      00028 
                      00029 ;--------------------------------------------------------
                      00030 ;       Equates to used internal registers
                      00031 ;--------------------------------------------------------
  00000FD8            00032 STATUS  equ     0xfd8
  00000FE8            00033 WREG    equ     0xfe8
  00000FE9            00034 FSR0L   equ     0xfe9
  00000FE1            00035 FSR1L   equ     0xfe1
  00000FD9            00036 FSR2L   equ     0xfd9
  00000FE6            00037 POSTINC1        equ     0xfe6
  00000FE5            00038 POSTDEC1        equ     0xfe5
  00000FE4            00039 PREINC1 equ     0xfe4
  00000FDB            00040 PLUSW2  equ     0xfdb
  00000FF3            00041 PRODL   equ     0xff3
  00000FF4            00042 PRODH   equ     0xff4
                      00043 
                      00044 
                      00045 ; Internal registers
                      00046 .registers      udata_ovr       0x0000
000000                00047 r0x00   res     1
000001                00048 r0x01   res     1
000002                00049 r0x02   res     1
000003                00050 r0x03   res     1
000004                00051 r0x04   res     1
000005                00052 r0x05   res     1
000006                00053 r0x06   res     1
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000007                00054 r0x07   res     1
000008                00055 r0x08   res     1
000009                00056 r0x09   res     1
00000A                00057 r0x0a   res     1
00000B                00058 r0x0b   res     1
00000C                00059 r0x0c   res     1
00000D                00060 r0x0d   res     1
00000E                00061 r0x0e   res     1
00000F                00062 r0x0f   res     1
000010                00063 r0x10   res     1
000011                00064 r0x11   res     1
000012                00065 r0x12   res     1
                      00066 
                      00067 ;--------------------------------------------------------
                      00068 ; global & static initialisations
                      00069 ;--------------------------------------------------------
                      00070 ; I code from now on!
                      00071 ; ; Starting pCode block
                      00072 ; ;ic:1:  _entry($30) :
                      00073 ; ;ic:2:        proc _atof [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( char generic* fixed) fixed}
                      00074 S_atof__atof    code
000000                00075 _atof:
                      00076 ;       .line   32; stdlib/atof.c       float atof(char * s)
000000 CFD9 FFE5      00077         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00078         MOVFF   FSR1L, FSR2L
000008 C000 FFE5      00079         MOVFF   r0x00, POSTDEC1
00000C C000 FFE5      00080         MOVFF   r0x01, POSTDEC1
000010 C000 FFE5      00081         MOVFF   r0x02, POSTDEC1
000014 C000 FFE5      00082         MOVFF   r0x03, POSTDEC1
000018 C000 FFE5      00083         MOVFF   r0x04, POSTDEC1
00001C C000 FFE5      00084         MOVFF   r0x05, POSTDEC1
000020 C000 FFE5      00085         MOVFF   r0x06, POSTDEC1
000024 C000 FFE5      00086         MOVFF   r0x07, POSTDEC1
000028 C000 FFE5      00087         MOVFF   r0x08, POSTDEC1
00002C C000 FFE5      00088         MOVFF   r0x09, POSTDEC1
000030 C000 FFE5      00089         MOVFF   r0x0a, POSTDEC1
000034 C000 FFE5      00090         MOVFF   r0x0b, POSTDEC1
000038 C000 FFE5      00091         MOVFF   r0x0c, POSTDEC1
00003C C000 FFE5      00092         MOVFF   r0x0d, POSTDEC1
000040 C000 FFE5      00093         MOVFF   r0x0e, POSTDEC1
000044 C000 FFE5      00094         MOVFF   r0x0f, POSTDEC1
000048 C000 FFE5      00095         MOVFF   r0x10, POSTDEC1
00004C C000 FFE5      00096         MOVFF   r0x11, POSTDEC1
000050 C000 FFE5      00097         MOVFF   r0x12, POSTDEC1
                      00098 ; ;ic:3: iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] = recv _atof [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( char generic* fixed) fixed}
000054 0E02           00099         MOVLW   0x02
000056 CFDB F000      00100         MOVFF   PLUSW2, r0x00
00005A 0E03           00101         MOVLW   0x03
00005C CFDB F000      00102         MOVFF   PLUSW2, r0x01
000060 0E04           00103         MOVLW   0x04
000062 CFDB F000      00104         MOVFF   PLUSW2, r0x02
                      00105 ; ;ic:4:        iTemp5 [k10 lr4:25 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] := iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ]
                      00106 ;       .line   39; stdlib/atof.c       while (isspace(*s)) s++;
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000066 C000 F000      00107         MOVFF   r0x00, r0x03
00006A C000 F000      00108         MOVFF   r0x01, r0x04
00006E C000 F000      00109         MOVFF   r0x02, r0x05
                      00110 ; ;ic:6:  _whilecontinue_0($1) :
                      00111 ; ;ic:7:        iTemp2 [k6 lr7:8 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ] = @[iTemp5 [k10 lr4:25 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] + 0x0 {const-unsigned-char literal}]
000072                00112 _00105_DS_:
000072 C000 FFE9      00113         MOVFF   r0x03, FSR0L
000076 C000 FFF3      00114         MOVFF   r0x04, PRODL
00007A 5000           00115         MOVF    r0x05, W
00007C EC00 F000      00116         CALL    __gptrget1
                      00117 ; #     MOVWF   r0x06
                      00118 ; #;;ic:8:      send iTemp2 [k6 lr7:8 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ]{argreg = 1}
                      00119 ; #;;ic:9:      iTemp3 [k8 lr9:10 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x06 ] = call _isspace [k4 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char function ( unsigned-char fixed) fixed}
                      00120 ; #     MOVF    r0x06, W
000080 6EE5           00121         MOVWF   POSTDEC1
000082 EC00 F000      00122         CALL    _isspace
000086 6E00           00123         MOVWF   r0x06
000088 52E6           00124         MOVF    POSTINC1, F
                      00125 ; ;ic:10:       if iTemp3 [k8 lr9:10 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x06 ] == 0 goto loopExitLbl6($48)
00008A 5000           00126         MOVF    r0x06, W
00008C E000           00127         BZ      _00152_DS_
                      00128 ; ;ic:11:       iTemp5 [k10 lr4:25 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] = iTemp5 [k10 lr4:25 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] + 0x1 {const-unsigned-char literal}
00008E 2A00           00129         INCF    r0x03, F
000090 E300           00130         BNC     _00170_DS_
000092 4A00           00131         INFSNZ  r0x04, F
000094 2A00           00132         INCF    r0x05, F
                      00133 ; ;ic:12:        goto _whilecontinue_0($1)
000096                00134 _00170_DS_:
000096 D000           00135         BRA     _00105_DS_
                      00136 ; ;ic:13:  loopExitLbl6($48) :
                      00137 ; ;ic:14:       iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] := iTemp5 [k10 lr4:25 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ]
000098                00138 _00152_DS_:
000098 C000 F000      00139         MOVFF   r0x03, r0x00
00009C C000 F000      00140         MOVFF   r0x04, r0x01
0000A0 C000 F000      00141         MOVFF   r0x05, r0x02
                      00142 ; ;ic:15:       iTemp7 [k12 lr15:23 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ] = @[iTemp5 [k10 lr4:25 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] + 0x0 {const-unsigned-char literal}]
                      00143 ;       .line   42; stdlib/atof.c       if (*s == '-')
0000A4 C000 FFE9      00144         MOVFF   r0x03, FSR0L
0000A8 C000 FFF3      00145         MOVFF   r0x04, PRODL
0000AC 5000           00146         MOVF    r0x05, W
0000AE EC00 F000      00147         CALL    __gptrget1
                      00148 ; #     MOVWF   r0x06
                      00149 ; #;;ic:16:     iTemp8 [k13 lr16:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp7 [k12 lr15:23 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ] == 0x2d {const-char literal}
                      00150 ; #     MOVF    r0x06, W
0000B2 6E00           00151         MOVWF   r0x06
0000B4 0A2D           00152         XORLW   0x2d
0000B6 E100           00153         BNZ     _00111_DS_
                      00154 ; ;ic:17:       if iTemp8 [k13 lr16:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_1($7)
                      00155 ; ;ic:18:       iTemp9 [k14 lr18:116 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _atof_sign_1_26}[r0x07 ] := 0x1 {const-unsigned-char literal}
                      00156 ;       .line   44; stdlib/atof.c       sign=1;
0000B8 0E01           00157         MOVLW   0x01
0000BA 6E00           00158         MOVWF   r0x07
                      00159 ; ;ic:19:       iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] = iTemp5 [k10 lr4:25 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] + 0x1 {const-unsigned-char literal}
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00160 ;       .line   45; stdlib/atof.c       s++;
0000BC 5000           00161         MOVF    r0x03, W
0000BE 0F01           00162         ADDLW   0x01
0000C0 6E00           00163         MOVWF   r0x00
0000C2 0E00           00164         MOVLW   0x00
0000C4 2000           00165         ADDWFC  r0x04, W
0000C6 6E00           00166         MOVWF   r0x01
0000C8 0E00           00167         MOVLW   0x00
0000CA 2000           00168         ADDWFC  r0x05, W
0000CC 6E00           00169         MOVWF   r0x02
                      00170 ; ;ic:20:        goto _ifend_1($8)
0000CE D000           00171         BRA     _00112_DS_
                      00172 ; ;ic:21:  _iffalse_1($7) :
                      00173 ; ;ic:22:       iTemp9 [k14 lr18:116 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _atof_sign_1_26}[r0x07 ] := 0x0 {const-unsigned-char literal}
0000D0                00174 _00111_DS_:
                      00175 ;       .line   49; stdlib/atof.c       sign=0;
0000D0 6A00           00176         CLRF    r0x07
                      00177 ; ;ic:23:       iTemp14 [k20 lr23:24 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp7 [k12 lr15:23 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x06 ] == 0x2b {const-char literal}
                      00178 ;       .line   50; stdlib/atof.c       if (*s == '+') s++;
0000D2 5000           00179         MOVF    r0x06, W
0000D4 0A2B           00180         XORLW   0x2b
0000D6 E100           00181         BNZ     _00112_DS_
                      00182 ; ;ic:24:       if iTemp14 [k20 lr23:24 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _ifend_1($8)
                      00183 ; ;ic:25:       iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] = iTemp5 [k10 lr4:25 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x03 r0x04 r0x05 ] + 0x1 {const-unsigned-char literal}
0000D8 5000           00184         MOVF    r0x03, W
0000DA 0F01           00185         ADDLW   0x01
0000DC 6E00           00186         MOVWF   r0x00
0000DE 0E00           00187         MOVLW   0x00
0000E0 2000           00188         ADDWFC  r0x04, W
0000E2 6E00           00189         MOVWF   r0x01
0000E4 0E00           00190         MOVLW   0x00
0000E6 2000           00191         ADDWFC  r0x05, W
0000E8 6E00           00192         MOVWF   r0x02
                      00193 ; ;ic:26:  _ifend_1($8) :
                      00194 ; ;ic:27:       iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ] := 0 {const-float literal}
0000EA                00195 _00112_DS_:
                      00196 ;       .line   54; stdlib/atof.c       for (value=0.0; isdigit(*s); s++)
0000EA 6A00           00197         CLRF    r0x03
0000EC 6A00           00198         CLRF    r0x04
0000EE 6A00           00199         CLRF    r0x05
0000F0 6A00           00200         CLRF    r0x06
                      00201 ; ;ic:28:       iTemp29 [k38 lr28:53 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x08 r0x09 r0x0a ] := iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ]
0000F2 C000 F000      00202         MOVFF   r0x00, r0x08
0000F6 C000 F000      00203         MOVFF   r0x01, r0x09
0000FA C000 F000      00204         MOVFF   r0x02, r0x0a
                      00205 ; ;ic:30:  _forcond_0($21) :
                      00206 ; ;ic:31:       iTemp19 [k27 lr31:32 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0b ] = @[iTemp29 [k38 lr28:53 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x08 r0x09 r0x0a ] + 0x0 {const-unsigned-char literal}]
0000FE                00207 _00125_DS_:
0000FE C000 FFE9      00208         MOVFF   r0x08, FSR0L
000102 C000 FFF3      00209         MOVFF   r0x09, PRODL
000106 5000           00210         MOVF    r0x0a, W
000108 EC00 F000      00211         CALL    __gptrget1
                      00212 ; #     MOVWF   r0x0b
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00213 ; #;;ic:32:     send iTemp19 [k27 lr31:32 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0b ]{argreg = 1}
                      00214 ; #;;ic:33:     iTemp20 [k29 lr33:34 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x0b ] = call _isdigit [k25 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char function ( unsigned-char fixed) fixed}
                      00215 ; #     MOVF    r0x0b, W
00010C 6EE5           00216         MOVWF   POSTDEC1
00010E EC00 F000      00217         CALL    _isdigit
000112 6E00           00218         MOVWF   r0x0b
000114 52E6           00219         MOVF    POSTINC1, F
                      00220 ; ;ic:34:       if iTemp20 [k29 lr33:34 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x0b ] == 0 goto loopExitLbl7($49)
000116 5000           00221         MOVF    r0x0b, W
000118 B4D8           00222         BTFSC   STATUS, 2
00011A D000           00223         BRA     _00153_DS_
                      00224 ; ;ic:35:       send 10 {const-float literal}{argreg = 1}
                      00225 ; ;ic:36:       send iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ]{argreg = 2}
                      00226 ; ;ic:37:       iTemp21 [k30 lr37:44 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float fixed}[r0x0b r0x0c r0x0d r0x0e ] = call ___fsmul [k89 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( float fixed, float fixed) fixed}
                      00227 ;       .line   56; stdlib/atof.c       value=10.0*value+(*s-'0');
00011C 5000           00228         MOVF    r0x06, W
00011E 6EE5           00229         MOVWF   POSTDEC1
000120 5000           00230         MOVF    r0x05, W
000122 6EE5           00231         MOVWF   POSTDEC1
000124 5000           00232         MOVF    r0x04, W
000126 6EE5           00233         MOVWF   POSTDEC1
000128 5000           00234         MOVF    r0x03, W
00012A 6EE5           00235         MOVWF   POSTDEC1
00012C 0E41           00236         MOVLW   0x41
00012E 6EE5           00237         MOVWF   POSTDEC1
000130 0E20           00238         MOVLW   0x20
000132 6EE5           00239         MOVWF   POSTDEC1
000134 0E00           00240         MOVLW   0x00
000136 6AE5           00241         CLRF    POSTDEC1
000138 6AE5           00242         CLRF    POSTDEC1
00013A EC00 F000      00243         CALL    ___fsmul
00013E 6E00           00244         MOVWF   r0x0b
000140 CFF3 F000      00245         MOVFF   PRODL, r0x0c
000144 CFF4 F000      00246         MOVFF   PRODH, r0x0d
000148 CFE9 F000      00247         MOVFF   FSR0L, r0x0e
00014C 0E08           00248         MOVLW   0x08
00014E 26E1           00249         ADDWF   FSR1L, F
                      00250 ; ;ic:38:       iTemp23 [k32 lr38:39 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0f ] = @[iTemp29 [k38 lr28:53 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x08 r0x09 r0x0a ] + 0x0 {const-unsigned-char literal}]
000150 C000 FFE9      00251         MOVFF   r0x08, FSR0L
000154 C000 FFF3      00252         MOVFF   r0x09, PRODL
000158 5000           00253         MOVF    r0x0a, W
00015A EC00 F000      00254         CALL    __gptrget1
00015E 6E00           00255         MOVWF   r0x0f
                      00256 ; ;ic:39:       iTemp24 [k33 lr39:40 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}[r0x0f r0x10 ] = (int fixed)iTemp23 [k32 lr38:39 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0f ]
000160 6A00           00257         CLRF    r0x10
000162 BE00           00258         BTFSC   r0x0f, 7
000164 6800           00259         SETF    r0x10
                      00260 ; ;ic:40:       iTemp25 [k34 lr40:41 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x0f r0x10 ] = iTemp24 [k33 lr39:40 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}[r0x0f r0x10 ] - 0x30 {int literal}
000166 0ED0           00261         MOVLW   0xd0
000168 2600           00262         ADDWF   r0x0f, F
00016A A0D8           00263         BTFSS   STATUS, 0
00016C 0600           00264         DECF    r0x10, F
                      00265 ; ;ic:41:       send iTemp25 [k34 lr40:41 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x0f r0x10 ]{argreg = 1}
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00266 ; ;ic:42:       iTemp26 [k35 lr42:44 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float fixed}[r0x0f r0x10 r0x11 r0x12 ] = call ___sint2fs [k90 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( int fixed) fixed}
00016E 5000           00267         MOVF    r0x10, W
000170 6EE5           00268         MOVWF   POSTDEC1
000172 5000           00269         MOVF    r0x0f, W
000174 6EE5           00270         MOVWF   POSTDEC1
000176 EC00 F000      00271         CALL    ___sint2fs
00017A 6E00           00272         MOVWF   r0x0f
00017C CFF3 F000      00273         MOVFF   PRODL, r0x10
000180 CFF4 F000      00274         MOVFF   PRODH, r0x11
000184 CFE9 F000      00275         MOVFF   FSR0L, r0x12
000188 52E6           00276         MOVF    POSTINC1, F
00018A 52E6           00277         MOVF    POSTINC1, F
                      00278 ; ;ic:43:       send iTemp21 [k30 lr37:44 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float fixed}[r0x0b r0x0c r0x0d r0x0e ]{argreg = 1}
                      00279 ; ;ic:44:       send iTemp26 [k35 lr42:44 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float fixed}[r0x0f r0x10 r0x11 r0x12 ]{argreg = 2}
                      00280 ; ;ic:45:       iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ] = call ___fsadd [k91 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( float fixed, float fixed) fixed}
00018C 5000           00281         MOVF    r0x12, W
00018E 6EE5           00282         MOVWF   POSTDEC1
000190 5000           00283         MOVF    r0x11, W
000192 6EE5           00284         MOVWF   POSTDEC1
000194 5000           00285         MOVF    r0x10, W
000196 6EE5           00286         MOVWF   POSTDEC1
000198 5000           00287         MOVF    r0x0f, W
00019A 6EE5           00288         MOVWF   POSTDEC1
00019C 5000           00289         MOVF    r0x0e, W
00019E 6EE5           00290         MOVWF   POSTDEC1
0001A0 5000           00291         MOVF    r0x0d, W
0001A2 6EE5           00292         MOVWF   POSTDEC1
0001A4 5000           00293         MOVF    r0x0c, W
0001A6 6EE5           00294         MOVWF   POSTDEC1
0001A8 5000           00295         MOVF    r0x0b, W
0001AA 6EE5           00296         MOVWF   POSTDEC1
0001AC EC00 F000      00297         CALL    ___fsadd
0001B0 6E00           00298         MOVWF   r0x03
0001B2 CFF3 F000      00299         MOVFF   PRODL, r0x04
0001B6 CFF4 F000      00300         MOVFF   PRODH, r0x05
0001BA CFE9 F000      00301         MOVFF   FSR0L, r0x06
0001BE 0E08           00302         MOVLW   0x08
0001C0 26E1           00303         ADDWF   FSR1L, F
                      00304 ; ;ic:46:       iTemp29 [k38 lr28:53 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x08 r0x09 r0x0a ] = iTemp29 [k38 lr28:53 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x08 r0x09 r0x0a ] + 0x1 {const-unsigned-char literal}
                      00305 ;       .line   54; stdlib/atof.c       for (value=0.0; isdigit(*s); s++)
0001C2 2A00           00306         INCF    r0x08, F
0001C4 E300           00307         BNC     _00175_DS_
0001C6 4A00           00308         INFSNZ  r0x09, F
0001C8 2A00           00309         INCF    r0x0a, F
                      00310 ; ;ic:47:        goto _forcond_0($21)
0001CA                00311 _00175_DS_:
0001CA D000           00312         BRA     _00125_DS_
                      00313 ; ;ic:48:  loopExitLbl7($49) :
                      00314 ; ;ic:49:       iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] := iTemp29 [k38 lr28:53 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x08 r0x09 r0x0a ]
0001CC                00315 _00153_DS_:
0001CC C000 F000      00316         MOVFF   r0x08, r0x00
0001D0 C000 F000      00317         MOVFF   r0x09, r0x01
0001D4 C000 F000      00318         MOVFF   r0x0a, r0x02
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00319 ; ;ic:50:       iTemp31 [k40 lr50:51 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0b ] = @[iTemp29 [k38 lr28:53 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x08 r0x09 r0x0a ] + 0x0 {const-unsigned-char literal}]
                      00320 ;       .line   60; stdlib/atof.c       if (*s == '.')
0001D8 C000 FFE9      00321         MOVFF   r0x08, FSR0L
0001DC C000 FFF3      00322         MOVFF   r0x09, PRODL
0001E0 5000           00323         MOVF    r0x0a, W
0001E2 EC00 F000      00324         CALL    __gptrget1
                      00325 ; #     MOVWF   r0x0b
                      00326 ; #;;ic:51:     iTemp32 [k41 lr51:52 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp31 [k40 lr50:51 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0b ] == 0x2e {const-char literal}
                      00327 ; #     MOVF    r0x0b, W
0001E6 0A2E           00328         XORLW   0x2e
0001E8 E000           00329         BZ      _00177_DS_
0001EA D000           00330         BRA     _00114_DS_
                      00331 ; ;ic:52:       if iTemp32 [k41 lr51:52 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_2($10)
                      00332 ; ;ic:53:       iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] = iTemp29 [k38 lr28:53 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x08 r0x09 r0x0a ] + 0x1 {const-unsigned-char literal}
0001EC                00333 _00177_DS_:
                      00334 ;       .line   62; stdlib/atof.c       s++;
0001EC 5000           00335         MOVF    r0x08, W
0001EE 0F01           00336         ADDLW   0x01
0001F0 6E00           00337         MOVWF   r0x00
0001F2 0E00           00338         MOVLW   0x00
0001F4 2000           00339         ADDWFC  r0x09, W
0001F6 6E00           00340         MOVWF   r0x01
0001F8 0E00           00341         MOVLW   0x00
0001FA 2000           00342         ADDWFC  r0x0a, W
0001FC 6E00           00343         MOVWF   r0x02
                      00344 ; ;ic:54:       iTemp35 [k44 lr54:77 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_fraction_1_26}[r0x08 r0x09 r0x0a r0x0b ] := 0.1 {const-float literal}
                      00345 ;       .line   63; stdlib/atof.c       for (fraction=0.1; isdigit(*s); s++)
0001FE 0ECD           00346         MOVLW   0xcd
000200 6E00           00347         MOVWF   r0x08
000202 0ECC           00348         MOVLW   0xcc
000204 6E00           00349         MOVWF   r0x09
000206 6E00           00350         MOVWF   r0x0a
000208 0E3D           00351         MOVLW   0x3d
00020A 6E00           00352         MOVWF   r0x0b
                      00353 ; ;ic:55:       iTemp48 [k58 lr55:79 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x0c r0x0d r0x0e ] := iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ]
00020C C000 F000      00354         MOVFF   r0x00, r0x0c
000210 C000 F000      00355         MOVFF   r0x01, r0x0d
000214 C000 F000      00356         MOVFF   r0x02, r0x0e
                      00357 ; ;ic:57:  _forcond_1($25) :
                      00358 ; ;ic:58:       iTemp37 [k47 lr58:59 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0f ] = @[iTemp48 [k58 lr55:79 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x0c r0x0d r0x0e ] + 0x0 {const-unsigned-char literal}]
000218                00359 _00129_DS_:
000218 C000 FFE9      00360         MOVFF   r0x0c, FSR0L
00021C C000 FFF3      00361         MOVFF   r0x0d, PRODL
000220 5000           00362         MOVF    r0x0e, W
000222 EC00 F000      00363         CALL    __gptrget1
                      00364 ; #     MOVWF   r0x0f
                      00365 ; #;;ic:59:     send iTemp37 [k47 lr58:59 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0f ]{argreg = 1}
                      00366 ; #;;ic:60:     iTemp38 [k48 lr60:61 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x0f ] = call _isdigit [k25 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char function ( unsigned-char fixed) fixed}
                      00367 ; #     MOVF    r0x0f, W
000226 6EE5           00368         MOVWF   POSTDEC1
000228 EC00 F000      00369         CALL    _isdigit
00022C 6E00           00370         MOVWF   r0x0f
00022E 52E6           00371         MOVF    POSTINC1, F
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00372 ; ;ic:61:       if iTemp38 [k48 lr60:61 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x0f ] == 0 goto loopExitLbl8($50)
000230 5000           00373         MOVF    r0x0f, W
000232 B4D8           00374         BTFSC   STATUS, 2
000234 D000           00375         BRA     _00154_DS_
                      00376 ; ;ic:62:       iTemp40 [k50 lr62:63 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0f ] = @[iTemp48 [k58 lr55:79 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x0c r0x0d r0x0e ] + 0x0 {const-unsigned-char literal}]
                      00377 ;       .line   65; stdlib/atof.c       value+=(*s-'0')*fraction;
000236 C000 FFE9      00378         MOVFF   r0x0c, FSR0L
00023A C000 FFF3      00379         MOVFF   r0x0d, PRODL
00023E 5000           00380         MOVF    r0x0e, W
000240 EC00 F000      00381         CALL    __gptrget1
000244 6E00           00382         MOVWF   r0x0f
                      00383 ; ;ic:63:       iTemp41 [k51 lr63:64 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}[r0x0f r0x10 ] = (int fixed)iTemp40 [k50 lr62:63 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0f ]
000246 6A00           00384         CLRF    r0x10
000248 BE00           00385         BTFSC   r0x0f, 7
00024A 6800           00386         SETF    r0x10
                      00387 ; ;ic:64:       iTemp42 [k52 lr64:65 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x0f r0x10 ] = iTemp41 [k51 lr63:64 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}[r0x0f r0x10 ] - 0x30 {int literal}
00024C 0ED0           00388         MOVLW   0xd0
00024E 2600           00389         ADDWF   r0x0f, F
000250 A0D8           00390         BTFSS   STATUS, 0
000252 0600           00391         DECF    r0x10, F
                      00392 ; ;ic:65:       send iTemp42 [k52 lr64:65 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x0f r0x10 ]{argreg = 1}
                      00393 ; ;ic:66:       iTemp43 [k53 lr66:68 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float fixed}[r0x0f r0x10 r0x11 r0x12 ] = call ___sint2fs [k90 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( int fixed) fixed}
000254 5000           00394         MOVF    r0x10, W
000256 6EE5           00395         MOVWF   POSTDEC1
000258 5000           00396         MOVF    r0x0f, W
00025A 6EE5           00397         MOVWF   POSTDEC1
00025C EC00 F000      00398         CALL    ___sint2fs
000260 6E00           00399         MOVWF   r0x0f
000262 CFF3 F000      00400         MOVFF   PRODL, r0x10
000266 CFF4 F000      00401         MOVFF   PRODH, r0x11
00026A CFE9 F000      00402         MOVFF   FSR0L, r0x12
00026E 52E6           00403         MOVF    POSTINC1, F
000270 52E6           00404         MOVF    POSTINC1, F
                      00405 ; ;ic:67:       send iTemp43 [k53 lr66:68 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float fixed}[r0x0f r0x10 r0x11 r0x12 ]{argreg = 1}
                      00406 ; ;ic:68:       send iTemp35 [k44 lr54:77 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_fraction_1_26}[r0x08 r0x09 r0x0a r0x0b ]{argreg = 2}
                      00407 ; ;ic:69:       iTemp44 [k54 lr69:71 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float fixed}[r0x0f r0x10 r0x11 r0x12 ] = call ___fsmul [k89 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( float fixed, float fixed) fixed}
000272 5000           00408         MOVF    r0x0b, W
000274 6EE5           00409         MOVWF   POSTDEC1
000276 5000           00410         MOVF    r0x0a, W
000278 6EE5           00411         MOVWF   POSTDEC1
00027A 5000           00412         MOVF    r0x09, W
00027C 6EE5           00413         MOVWF   POSTDEC1
00027E 5000           00414         MOVF    r0x08, W
000280 6EE5           00415         MOVWF   POSTDEC1
000282 5000           00416         MOVF    r0x12, W
000284 6EE5           00417         MOVWF   POSTDEC1
000286 5000           00418         MOVF    r0x11, W
000288 6EE5           00419         MOVWF   POSTDEC1
00028A 5000           00420         MOVF    r0x10, W
00028C 6EE5           00421         MOVWF   POSTDEC1
00028E 5000           00422         MOVF    r0x0f, W
000290 6EE5           00423         MOVWF   POSTDEC1
000292 EC00 F000      00424         CALL    ___fsmul
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000296 6E00           00425         MOVWF   r0x0f
000298 CFF3 F000      00426         MOVFF   PRODL, r0x10
00029C CFF4 F000      00427         MOVFF   PRODH, r0x11
0002A0 CFE9 F000      00428         MOVFF   FSR0L, r0x12
0002A4 0E08           00429         MOVLW   0x08
0002A6 26E1           00430         ADDWF   FSR1L, F
                      00431 ; ;ic:70:       send iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ]{argreg = 1}
                      00432 ; ;ic:71:       send iTemp44 [k54 lr69:71 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float fixed}[r0x0f r0x10 r0x11 r0x12 ]{argreg = 2}
                      00433 ; ;ic:72:       iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ] = call ___fsadd [k91 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( float fixed, float fixed) fixed}
0002A8 5000           00434         MOVF    r0x12, W
0002AA 6EE5           00435         MOVWF   POSTDEC1
0002AC 5000           00436         MOVF    r0x11, W
0002AE 6EE5           00437         MOVWF   POSTDEC1
0002B0 5000           00438         MOVF    r0x10, W
0002B2 6EE5           00439         MOVWF   POSTDEC1
0002B4 5000           00440         MOVF    r0x0f, W
0002B6 6EE5           00441         MOVWF   POSTDEC1
0002B8 5000           00442         MOVF    r0x06, W
0002BA 6EE5           00443         MOVWF   POSTDEC1
0002BC 5000           00444         MOVF    r0x05, W
0002BE 6EE5           00445         MOVWF   POSTDEC1
0002C0 5000           00446         MOVF    r0x04, W
0002C2 6EE5           00447         MOVWF   POSTDEC1
0002C4 5000           00448         MOVF    r0x03, W
0002C6 6EE5           00449         MOVWF   POSTDEC1
0002C8 EC00 F000      00450         CALL    ___fsadd
0002CC 6E00           00451         MOVWF   r0x03
0002CE CFF3 F000      00452         MOVFF   PRODL, r0x04
0002D2 CFF4 F000      00453         MOVFF   PRODH, r0x05
0002D6 CFE9 F000      00454         MOVFF   FSR0L, r0x06
0002DA 0E08           00455         MOVLW   0x08
0002DC 26E1           00456         ADDWF   FSR1L, F
                      00457 ; ;ic:73:       send 0.1 {const-float literal}{argreg = 1}
                      00458 ; ;ic:74:       send iTemp35 [k44 lr54:77 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_fraction_1_26}[r0x08 r0x09 r0x0a r0x0b ]{argreg = 2}
                      00459 ; ;ic:75:       iTemp35 [k44 lr54:77 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_fraction_1_26}[r0x08 r0x09 r0x0a r0x0b ] = call ___fsmul [k89 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( float fixed, float fixed) fixed}
                      00460 ;       .line   66; stdlib/atof.c       fraction*=0.1;
0002DE 5000           00461         MOVF    r0x0b, W
0002E0 6EE5           00462         MOVWF   POSTDEC1
0002E2 5000           00463         MOVF    r0x0a, W
0002E4 6EE5           00464         MOVWF   POSTDEC1
0002E6 5000           00465         MOVF    r0x09, W
0002E8 6EE5           00466         MOVWF   POSTDEC1
0002EA 5000           00467         MOVF    r0x08, W
0002EC 6EE5           00468         MOVWF   POSTDEC1
0002EE 0E3D           00469         MOVLW   0x3d
0002F0 6EE5           00470         MOVWF   POSTDEC1
0002F2 0ECC           00471         MOVLW   0xcc
0002F4 6EE5           00472         MOVWF   POSTDEC1
0002F6 6EE5           00473         MOVWF   POSTDEC1
0002F8 0ECD           00474         MOVLW   0xcd
0002FA 6EE5           00475         MOVWF   POSTDEC1
0002FC EC00 F000      00476         CALL    ___fsmul
000300 6E00           00477         MOVWF   r0x08
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000302 CFF3 F000      00478         MOVFF   PRODL, r0x09
000306 CFF4 F000      00479         MOVFF   PRODH, r0x0a
00030A CFE9 F000      00480         MOVFF   FSR0L, r0x0b
00030E 0E08           00481         MOVLW   0x08
000310 26E1           00482         ADDWF   FSR1L, F
                      00483 ; ;ic:76:       iTemp48 [k58 lr55:79 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x0c r0x0d r0x0e ] = iTemp48 [k58 lr55:79 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x0c r0x0d r0x0e ] + 0x1 {const-unsigned-char literal}
                      00484 ;       .line   63; stdlib/atof.c       for (fraction=0.1; isdigit(*s); s++)
000312 2A00           00485         INCF    r0x0c, F
000314 E300           00486         BNC     _00178_DS_
000316 4A00           00487         INFSNZ  r0x0d, F
000318 2A00           00488         INCF    r0x0e, F
                      00489 ; ;ic:77:        goto _forcond_1($25)
00031A                00490 _00178_DS_:
00031A D000           00491         BRA     _00129_DS_
                      00492 ; ;ic:78:  loopExitLbl8($50) :
                      00493 ; ;ic:79:       iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] := iTemp48 [k58 lr55:79 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char generic* fixed}[r0x0c r0x0d r0x0e ]
00031C                00494 _00154_DS_:
00031C C000 F000      00495         MOVFF   r0x0c, r0x00
000320 C000 F000      00496         MOVFF   r0x0d, r0x01
000324 C000 F000      00497         MOVFF   r0x0e, r0x02
                      00498 ; ;ic:80:  _iffalse_2($10) :
                      00499 ; ;ic:81:       iTemp50 [k61 lr81:82 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x08 ] = @[iTemp0 [k2 lr3:96 so:0]{ ia1 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] + 0x0 {const-unsigned-char literal}]
000328                00500 _00114_DS_:
                      00501 ;       .line   71; stdlib/atof.c       if (toupper(*s)=='E')
000328 C000 FFE9      00502         MOVFF   r0x00, FSR0L
00032C C000 FFF3      00503         MOVFF   r0x01, PRODL
000330 5000           00504         MOVF    r0x02, W
000332 EC00 F000      00505         CALL    __gptrget1
                      00506 ; #     MOVWF   r0x08
                      00507 ; #;;ic:82:     send iTemp50 [k61 lr81:82 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x08 ]{argreg = 1}
                      00508 ; #;;ic:83:     iTemp51 [k63 lr83:84 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x08 ] = call _islower [k59 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char function ( unsigned-char fixed) fixed}
                      00509 ; #     MOVF    r0x08, W
000336 6EE5           00510         MOVWF   POSTDEC1
000338 EC00 F000      00511         CALL    _islower
00033C 6E00           00512         MOVWF   r0x08
00033E 52E6           00513         MOVF    POSTINC1, F
                      00514 ; ;ic:84:       if iTemp51 [k63 lr83:84 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed}[r0x08 ] == 0 goto iTempLbl0($31)
000340 5000           00515         MOVF    r0x08, W
000342 E000           00516         BZ      _00135_DS_
                      00517 ; ;ic:85:       iTemp54 [k66 lr85:86 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x08 ] = @[iTemp0 [k2 lr3:96 so:0]{ ia1 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] + 0x0 {const-unsigned-char literal}]
000344 C000 FFE9      00518         MOVFF   r0x00, FSR0L
000348 C000 FFF3      00519         MOVFF   r0x01, PRODL
00034C 5000           00520         MOVF    r0x02, W
00034E EC00 F000      00521         CALL    __gptrget1
000352 6E00           00522         MOVWF   r0x08
                      00523 ; ;ic:86:       iTemp55 [k67 lr86:87 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x08 r0x09 ] = (int register)iTemp54 [k66 lr85:86 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x08 ]
000354 6A00           00524         CLRF    r0x09
000356 BE00           00525         BTFSC   r0x08, 7
000358 6800           00526         SETF    r0x09
                      00527 ; ;ic:87:       iTemp52 [k64 lr87:93 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x08 r0x09 ] = iTemp55 [k67 lr86:87 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x08 r0x09 ] & 0xffffffdf {int literal}
00035A 9A00           00528         BCF     r0x08, 5
                      00529 ; ;ic:88:        goto iTempLbl1($32)
00035C D000           00530         BRA     _00136_DS_
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00531 ; ;ic:89:  iTempLbl0($31) :
                      00532 ; ;ic:90:       iTemp58 [k70 lr90:91 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0a ] = @[iTemp0 [k2 lr3:96 so:0]{ ia1 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] + 0x0 {const-unsigned-char literal}]
00035E                00533 _00135_DS_:
00035E C000 FFE9      00534         MOVFF   r0x00, FSR0L
000362 C000 FFF3      00535         MOVFF   r0x01, PRODL
000366 5000           00536         MOVF    r0x02, W
000368 EC00 F000      00537         CALL    __gptrget1
00036C 6E00           00538         MOVWF   r0x0a
                      00539 ; ;ic:91:       iTemp52 [k64 lr87:93 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x08 r0x09 ] = (int register)iTemp58 [k70 lr90:91 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x0a ]
00036E C000 F000      00540         MOVFF   r0x0a, r0x08
000372 6A00           00541         CLRF    r0x09
000374 BE00           00542         BTFSC   r0x0a, 7
000376 6800           00543         SETF    r0x09
                      00544 ; ;ic:92:  iTempLbl1($32) :
                      00545 ; ;ic:93:       iTemp60 [k72 lr93:94 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp52 [k64 lr87:93 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int register}[r0x08 r0x09 ] == 0x45 {int literal}
000378                00546 _00136_DS_:
000378 5000           00547         MOVF    r0x08, W
00037A 0A45           00548         XORLW   0x45
00037C E100           00549         BNZ     _00180_DS_
00037E 5000           00550         MOVF    r0x09, W
000380 E000           00551         BZ      _00181_DS_
000382                00552 _00180_DS_:
000382 D000           00553         BRA     _00122_DS_
                      00554 ; ;ic:94:       if iTemp60 [k72 lr93:94 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_4($18)
                      00555 ; ;ic:95:       iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] = iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ] + 0x1 {const-unsigned-char literal}
000384                00556 _00181_DS_:
                      00557 ;       .line   73; stdlib/atof.c       s++;
000384 2A00           00558         INCF    r0x00, F
000386 E300           00559         BNC     _00182_DS_
000388 4A00           00560         INFSNZ  r0x01, F
00038A 2A00           00561         INCF    r0x02, F
                      00562 ; ;ic:96:       send iTemp0 [k2 lr3:96 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char generic* fixed}{ sir@ _atof_s_1_25}[r0x00 r0x01 r0x02 ]{argreg = 1}
                      00563 ; ;ic:97:       iTemp64 [k79 lr97:98 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}[r0x00 r0x01 ] = call _atoi [k77 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int function ( char generic* fixed) fixed}
00038C                00564 _00182_DS_:
                      00565 ;       .line   74; stdlib/atof.c       iexp=(char)atoi(s);
00038C 5000           00566         MOVF    r0x02, W
00038E 6EE5           00567         MOVWF   POSTDEC1
000390 5000           00568         MOVF    r0x01, W
000392 6EE5           00569         MOVWF   POSTDEC1
000394 5000           00570         MOVF    r0x00, W
000396 6EE5           00571         MOVWF   POSTDEC1
000398 EC00 F000      00572         CALL    _atoi
00039C 6E00           00573         MOVWF   r0x00
00039E 0E03           00574         MOVLW   0x03
0003A0 26E1           00575         ADDWF   FSR1L, F
                      00576 ; ;ic:98:       iTemp63 [k75 lr98:114 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _atof_iexp_1_26}[r0x00 ] = (char fixed)iTemp64 [k79 lr97:98 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{int fixed}[r0x00 r0x01 ]
                      00577 ; ;ic:100:  _whilecontinue_1($14) :
                      00578 ; ;ic:101:      if iTemp63 [k75 lr98:114 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _atof_iexp_1_26}[r0x00 ] == 0 goto _iffalse_4($18)
0003A2                00579 _00118_DS_:
                      00580 ;       .line   76; stdlib/atof.c       while(iexp!=0)
0003A2 5000           00581         MOVF    r0x00, W
0003A4 B4D8           00582         BTFSC   STATUS, 2
0003A6 D000           00583         BRA     _00122_DS_
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00584 ; ;ic:102:      iTemp66 [k81 lr102:103 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp63 [k75 lr98:114 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _atof_iexp_1_26}[r0x00 ] < 0x0 {const-char literal}
                      00585 ;       .line   78; stdlib/atof.c       if(iexp<0)
0003A8 80D8           00586         BSF     STATUS, 0
0003AA AE00           00587         BTFSS   r0x00, 7
0003AC 90D8           00588         BCF     STATUS, 0
0003AE E300           00589         BNC     _00116_DS_
                      00590 ; ;ic:103:      if iTemp66 [k81 lr102:103 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} == 0 goto _iffalse_3($12)
                      00591 ; ;ic:104:      send 0.1 {const-float literal}{argreg = 1}
                      00592 ; ;ic:105:      send iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ]{argreg = 2}
                      00593 ; ;ic:106:      iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ] = call ___fsmul [k89 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( float fixed, float fixed) fixed}
                      00594 ;       .line   80; stdlib/atof.c       value*=0.1;
0003B0 5000           00595         MOVF    r0x06, W
0003B2 6EE5           00596         MOVWF   POSTDEC1
0003B4 5000           00597         MOVF    r0x05, W
0003B6 6EE5           00598         MOVWF   POSTDEC1
0003B8 5000           00599         MOVF    r0x04, W
0003BA 6EE5           00600         MOVWF   POSTDEC1
0003BC 5000           00601         MOVF    r0x03, W
0003BE 6EE5           00602         MOVWF   POSTDEC1
0003C0 0E3D           00603         MOVLW   0x3d
0003C2 6EE5           00604         MOVWF   POSTDEC1
0003C4 0ECC           00605         MOVLW   0xcc
0003C6 6EE5           00606         MOVWF   POSTDEC1
0003C8 6EE5           00607         MOVWF   POSTDEC1
0003CA 0ECD           00608         MOVLW   0xcd
0003CC 6EE5           00609         MOVWF   POSTDEC1
0003CE EC00 F000      00610         CALL    ___fsmul
0003D2 6E00           00611         MOVWF   r0x03
0003D4 CFF3 F000      00612         MOVFF   PRODL, r0x04
0003D8 CFF4 F000      00613         MOVFF   PRODH, r0x05
0003DC CFE9 F000      00614         MOVFF   FSR0L, r0x06
0003E0 0E08           00615         MOVLW   0x08
0003E2 26E1           00616         ADDWF   FSR1L, F
                      00617 ; ;ic:107:      iTemp63 [k75 lr98:114 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _atof_iexp_1_26}[r0x00 ] = iTemp63 [k75 lr98:114 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _atof_iexp_1_26}[r0x00 ] + 0x1 {const-unsigned-char literal}
                      00618 ;       .line   81; stdlib/atof.c       iexp++;
0003E4 2A00           00619         INCF    r0x00, F
                      00620 ; ;ic:108:       goto _whilecontinue_1($14)
0003E6 D000           00621         BRA     _00118_DS_
                      00622 ; ;ic:109:  _iffalse_3($12) :
                      00623 ; ;ic:110:      send 10 {const-float literal}{argreg = 1}
                      00624 ; ;ic:111:      send iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ]{argreg = 2}
                      00625 ; ;ic:112:      iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ] = call ___fsmul [k89 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( float fixed, float fixed) fixed}
0003E8                00626 _00116_DS_:
                      00627 ;       .line   85; stdlib/atof.c       value*=10.0;
0003E8 5000           00628         MOVF    r0x06, W
0003EA 6EE5           00629         MOVWF   POSTDEC1
0003EC 5000           00630         MOVF    r0x05, W
0003EE 6EE5           00631         MOVWF   POSTDEC1
0003F0 5000           00632         MOVF    r0x04, W
0003F2 6EE5           00633         MOVWF   POSTDEC1
0003F4 5000           00634         MOVF    r0x03, W
0003F6 6EE5           00635         MOVWF   POSTDEC1
0003F8 0E41           00636         MOVLW   0x41
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003FA 6EE5           00637         MOVWF   POSTDEC1
0003FC 0E20           00638         MOVLW   0x20
0003FE 6EE5           00639         MOVWF   POSTDEC1
000400 0E00           00640         MOVLW   0x00
000402 6AE5           00641         CLRF    POSTDEC1
000404 6AE5           00642         CLRF    POSTDEC1
000406 EC00 F000      00643         CALL    ___fsmul
00040A 6E00           00644         MOVWF   r0x03
00040C CFF3 F000      00645         MOVFF   PRODL, r0x04
000410 CFF4 F000      00646         MOVFF   PRODH, r0x05
000414 CFE9 F000      00647         MOVFF   FSR0L, r0x06
000418 0E08           00648         MOVLW   0x08
00041A 26E1           00649         ADDWF   FSR1L, F
                      00650 ; ;ic:113:      iTemp63 [k75 lr98:114 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _atof_iexp_1_26}[r0x00 ] = iTemp63 [k75 lr98:114 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _atof_iexp_1_26}[r0x00 ] - 0x1 {const-unsigned-char literal}
                      00651 ;       .line   86; stdlib/atof.c       iexp--;
00041C 0600           00652         DECF    r0x00, F
                      00653 ; ;ic:114:       goto _whilecontinue_1($14)
00041E D000           00654         BRA     _00118_DS_
                      00655 ; ;ic:115:  _iffalse_4($18) :
                      00656 ; ;ic:116:      if iTemp9 [k14 lr18:116 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _atof_sign_1_26}[r0x07 ] == 0 goto _iffalse_5($20)
000420                00657 _00122_DS_:
                      00658 ;       .line   92; stdlib/atof.c       if(sign) value*=-1.0;
000420 5000           00659         MOVF    r0x07, W
000422 E000           00660         BZ      _00124_DS_
                      00661 ; ;ic:117:      iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ] = - iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ]
000424 7E00           00662         BTG     r0x06, 7
                      00663 ; ;ic:118:  _iffalse_5($20) :
                      00664 ; ;ic:119:      ret iTemp17 [k23 lr27:119 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{float fixed}{ sir@ _atof_value_1_26}[r0x03 r0x04 r0x05 r0x06 ]
000426                00665 _00124_DS_:
                      00666 ;       .line   93; stdlib/atof.c       return (value);
000426 C000 FFE9      00667         MOVFF   r0x06, FSR0L
00042A C000 FFF4      00668         MOVFF   r0x05, PRODH
00042E C000 FFF3      00669         MOVFF   r0x04, PRODL
000432 5000           00670         MOVF    r0x03, W
                      00671 ; ;ic:120:  _return($29) :
                      00672 ; ;ic:121:      eproc _atof [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{float function ( char generic* fixed) fixed}
000434 CFE4 F000      00673         MOVFF   PREINC1, r0x12
000438 CFE4 F000      00674         MOVFF   PREINC1, r0x11
00043C CFE4 F000      00675         MOVFF   PREINC1, r0x10
000440 CFE4 F000      00676         MOVFF   PREINC1, r0x0f
000444 CFE4 F000      00677         MOVFF   PREINC1, r0x0e
000448 CFE4 F000      00678         MOVFF   PREINC1, r0x0d
00044C CFE4 F000      00679         MOVFF   PREINC1, r0x0c
000450 CFE4 F000      00680         MOVFF   PREINC1, r0x0b
000454 CFE4 F000      00681         MOVFF   PREINC1, r0x0a
000458 CFE4 F000      00682         MOVFF   PREINC1, r0x09
00045C CFE4 F000      00683         MOVFF   PREINC1, r0x08
000460 CFE4 F000      00684         MOVFF   PREINC1, r0x07
000464 CFE4 F000      00685         MOVFF   PREINC1, r0x06
000468 CFE4 F000      00686         MOVFF   PREINC1, r0x05
00046C CFE4 F000      00687         MOVFF   PREINC1, r0x04
000470 CFE4 F000      00688         MOVFF   PREINC1, r0x03
000474 CFE4 F000      00689         MOVFF   PREINC1, r0x02
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000478 CFE4 F000      00690         MOVFF   PREINC1, r0x01
00047C CFE4 F000      00691         MOVFF   PREINC1, r0x00
000480 CFE4 FFD9      00692         MOVFF   PREINC1, FSR2L
000484 0012           00693         RETURN  
                      00694 
                      00695 
                      00696 
                      00697 ; Statistics:
                      00698 ; code size:     1158 (0x0486) bytes ( 0.88%)
                      00699 ;                 579 (0x0243) words
                      00700 ; udata size:       0 (0x0000) bytes ( 0.00%)
                      00701 ; access size:     19 (0x0013) bytes
                      00702 
                      00703 
                      00704         end
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE 15


SYMBOL TABLE
  LABEL                             VALUE

FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
POSTINC1                          00000FE6
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00105_DS_                        00000072
_00111_DS_                        000000D0
_00112_DS_                        000000EA
_00114_DS_                        00000328
_00116_DS_                        000003E8
_00118_DS_                        000003A2
_00122_DS_                        00000420
_00124_DS_                        00000426
_00125_DS_                        000000FE
_00129_DS_                        00000218
_00135_DS_                        0000035E
_00136_DS_                        00000378
_00152_DS_                        00000098
_00153_DS_                        000001CC
_00154_DS_                        0000031C
_00170_DS_                        00000096
_00175_DS_                        000001CA
_00177_DS_                        000001EC
_00178_DS_                        0000031A
_00180_DS_                        00000382
_00181_DS_                        00000384
_00182_DS_                        0000038C
__18F452                          00000001
___fsadd                          00000000
___fsmul                          00000000
___sint2fs                        00000000
__gptrget1                        00000000
_atof                             00000000
_atoi                             00000000
_isdigit                          00000000
_islower                          00000000
_isspace                          00000000
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009
gpasm-0.14.1 (Aug 18 2017)   atof.asm           8-18-2017  19:21:47          PAGE 16


SYMBOL TABLE
  LABEL                             VALUE 

r0x0a                             0000000A
r0x0b                             0000000B
r0x0c                             0000000C
r0x0d                             0000000D
r0x0e                             0000000E
r0x0f                             0000000F
r0x10                             00000010
r0x11                             00000011
r0x12                             00000012

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

