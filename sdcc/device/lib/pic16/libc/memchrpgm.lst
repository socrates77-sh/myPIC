gpasm-0.14.1 (Aug 18 2017)   memchrpgm.asm      8-18-2017  19:22:04          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;--------------------------------------------------------
                      00002 ; File Created by SDCC : free open source ANSI-C Compiler
                      00003 ; Version 3.2.0 #8004 (Aug 18 2017) (MINGW32)
                      00004 ; This file was generated Fri Aug 18 19:22:04 2017
                      00005 ;--------------------------------------------------------
                      00006 ; PIC16 port for the Microchip 16-bit core micros
                      00007 ;--------------------------------------------------------
                      00008         list    p=18f452
                      00009 
                      00010         radix dec
                      00011 
                      00012 ;--------------------------------------------------------
                      00013 ; public variables in this module
                      00014 ;--------------------------------------------------------
                      00015         global  _memchrpgm
                      00016 
                      00017 ;--------------------------------------------------------
                      00018 ;       Equates to used internal registers
                      00019 ;--------------------------------------------------------
  00000FD8            00020 STATUS  equ     0xfd8
  00000FE8            00021 WREG    equ     0xfe8
  00000FF6            00022 TBLPTRL equ     0xff6
  00000FF7            00023 TBLPTRH equ     0xff7
  00000FF8            00024 TBLPTRU equ     0xff8
  00000FF5            00025 TABLAT  equ     0xff5
  00000FE1            00026 FSR1L   equ     0xfe1
  00000FD9            00027 FSR2L   equ     0xfd9
  00000FE5            00028 POSTDEC1        equ     0xfe5
  00000FE4            00029 PREINC1 equ     0xfe4
  00000FDB            00030 PLUSW2  equ     0xfdb
  00000FF3            00031 PRODL   equ     0xff3
  00000FF4            00032 PRODH   equ     0xff4
                      00033 
                      00034 
                      00035 ; Internal registers
                      00036 .registers      udata_ovr       0x0000
000000                00037 r0x00   res     1
000001                00038 r0x01   res     1
000002                00039 r0x02   res     1
000003                00040 r0x03   res     1
000004                00041 r0x04   res     1
000005                00042 r0x05   res     1
000006                00043 r0x06   res     1
000007                00044 r0x07   res     1
000008                00045 r0x08   res     1
000009                00046 r0x09   res     1
                      00047 
                      00048 ;--------------------------------------------------------
                      00049 ; global & static initialisations
                      00050 ;--------------------------------------------------------
                      00051 ; I code from now on!
                      00052 ; ; Starting pCode block
                      00053 ; ;ic:1:  _entry($11) :
gpasm-0.14.1 (Aug 18 2017)   memchrpgm.asm      8-18-2017  19:22:04          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ; ;ic:2:        proc _memchrpgm [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void code* function ( const-void code* fixed, char fixed, unsigned-int fixed) code}
                      00055 S_memchrpgm__memchrpgm  code
000000                00056 _memchrpgm:
                      00057 ;       .line   33; string/memchrpgm.c  memchrpgm (__code void *s, char c, size_t count)
000000 CFD9 FFE5      00058         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00059         MOVFF   FSR1L, FSR2L
000008 C000 FFE5      00060         MOVFF   r0x00, POSTDEC1
00000C C000 FFE5      00061         MOVFF   r0x01, POSTDEC1
000010 C000 FFE5      00062         MOVFF   r0x02, POSTDEC1
000014 C000 FFE5      00063         MOVFF   r0x03, POSTDEC1
000018 C000 FFE5      00064         MOVFF   r0x04, POSTDEC1
00001C C000 FFE5      00065         MOVFF   r0x05, POSTDEC1
000020 C000 FFE5      00066         MOVFF   r0x06, POSTDEC1
000024 C000 FFE5      00067         MOVFF   r0x07, POSTDEC1
000028 C000 FFE5      00068         MOVFF   r0x08, POSTDEC1
00002C C000 FFE5      00069         MOVFF   r0x09, POSTDEC1
                      00070 ; ;ic:3: iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-void code* fixed}{ sir@ _memchrpgm_s_1_28}[r0x00 r0x01 r0x02 ] = recv _memchrpgm [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void code* function ( const-void code* fixed, char fixed, unsigned-int fixed) code}
000030 0E02           00071         MOVLW   0x02
000032 CFDB F000      00072         MOVFF   PLUSW2, r0x00
000036 0E03           00073         MOVLW   0x03
000038 CFDB F000      00074         MOVFF   PLUSW2, r0x01
00003C 0E04           00075         MOVLW   0x04
00003E CFDB F000      00076         MOVFF   PLUSW2, r0x02
                      00077 ; ;ic:4: iTemp1 [k4 lr4:20 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _memchrpgm_c_1_28}[r0x03 ] = recv _memchrpgm [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void code* function ( const-void code* fixed, char fixed, unsigned-int fixed) code}
000042 0E05           00078         MOVLW   0x05
000044 CFDB F000      00079         MOVFF   PLUSW2, r0x03
                      00080 ; ;ic:5: iTemp2 [k6 lr5:9 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-int fixed}{ sir@ _memchrpgm_count_1_28}[r0x04 r0x05 ] = recv _memchrpgm [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void code* function ( const-void code* fixed, char fixed, unsigned-int fixed) code}
000048 0E06           00081         MOVLW   0x06
00004A CFDB F000      00082         MOVFF   PLUSW2, r0x04
00004E 0E07           00083         MOVLW   0x07
000050 CFDB F000      00084         MOVFF   PLUSW2, r0x05
                      00085 ; ;ic:6:        if iTemp2 [k6 lr5:9 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-int fixed}{ sir@ _memchrpgm_count_1_28}[r0x04 r0x05 ] != 0 goto preHeaderLbl0($15)
                      00086 ;       .line   35; string/memchrpgm.c  if (!count)
000054 5000           00087         MOVF    r0x04, W
000056 1000           00088         IORWF   r0x05, W
000058 E100           00089         BNZ     _00108_DS_
                      00090 ; ;ic:7:        ret 0x0 {const-void code* literal}
                      00091 ;       .line   36; string/memchrpgm.c  return NULL;
00005A 6AF4           00092         CLRF    PRODH
00005C 6AF3           00093         CLRF    PRODL
00005E 6AE8           00094         CLRF    WREG
000060 D000           00095         BRA     _00114_DS_
                      00096 ; ;ic:8:  preHeaderLbl0($15) :
                      00097 ; ;ic:9:        iTemp9 [k14 lr9:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x04 r0x05 ] := iTemp2 [k6 lr5:9 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-int fixed}{ sir@ _memchrpgm_count_1_28}[r0x04 r0x05 ]
                      00098 ; ;ic:11:  _whilecontinue_0($4) :
                      00099 ; ;ic:12:       iTemp3 [k8 lr12:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char code* fixed}[r0x06 r0x07 r0x08 ] = (const-char code* fixed)iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-void code* fixed}{ sir@ _memchrpgm_s_1_28}[r0x00 r0x01 r0x02 ]
000062                00100 _00108_DS_:
                      00101 ;       .line   38; string/memchrpgm.c  while ((*(__code char *)s != c) && count)
000062 5000           00102         MOVF    r0x02, W
000064 6E00           00103         MOVWF   r0x08
000066 5000           00104         MOVF    r0x01, W
000068 6E00           00105         MOVWF   r0x07
00006A 5000           00106         MOVF    r0x00, W
gpasm-0.14.1 (Aug 18 2017)   memchrpgm.asm      8-18-2017  19:22:04          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00006C 6E00           00107         MOVWF   r0x06
                      00108 ; ;ic:13:       iTemp4 [k9 lr13:14 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x09 ] = @[iTemp3 [k8 lr12:17 so:0]{ ia1 a2p0 re0 rm0 nos0 ru0 dp0}{const-char code* fixed}[r0x06 r0x07 r0x08 ] + 0x0 {const-unsigned-char literal}]
00006E C000 FFF6      00109         MOVFF   r0x06, TBLPTRL
000072 C000 FFF7      00110         MOVFF   r0x07, TBLPTRH
000076 C000 FFF8      00111         MOVFF   r0x08, TBLPTRU
00007A 0009           00112         TBLRD*+ 
00007C CFF5 F000      00113         MOVFF   TABLAT, r0x09
                      00114 ; ;ic:14:       iTemp5 [k10 lr14:15 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} = iTemp4 [k9 lr13:14 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char register}[r0x09 ] == iTemp1 [k4 lr4:20 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ _memchrpgm_c_1_28}[r0x03 ]
000080 5000           00115         MOVF    r0x09, W
000082 1800           00116         XORWF   r0x03, W
000084 E000           00117         BZ      _00110_DS_
                      00118 ; ;ic:15:       if iTemp5 [k10 lr14:15 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char fixed} != 0 goto _whilebreak_0($6)
                      00119 ; ;ic:16:       if iTemp9 [k14 lr9:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x04 r0x05 ] == 0 goto _whilebreak_0($6)
000086 5000           00120         MOVF    r0x04, W
000088 1000           00121         IORWF   r0x05, W
00008A E000           00122         BZ      _00110_DS_
                      00123 ; ;ic:17:       iTemp7 [k12 lr17:18 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char code* fixed}[r0x06 r0x07 r0x08 ] = iTemp3 [k8 lr12:17 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char code* fixed}[r0x06 r0x07 r0x08 ] + 0x3 {const-unsigned-char literal}
                      00124 ;       .line   40; string/memchrpgm.c  s = (__code char *)s + sizeof (__code char *);
00008C 0E03           00125         MOVLW   0x03
00008E 2600           00126         ADDWF   r0x06, F
000090 0E00           00127         MOVLW   0x00
000092 2200           00128         ADDWFC  r0x07, F
000094 2200           00129         ADDWFC  r0x08, F
                      00130 ; ;ic:18:       iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-void code* fixed}{ sir@ _memchrpgm_s_1_28}[r0x00 r0x01 r0x02 ] = (const-void code* fixed)iTemp7 [k12 lr17:18 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{const-char code* fixed}[r0x06 r0x07 r0x08 ]
000096 5000           00131         MOVF    r0x08, W
000098 6E00           00132         MOVWF   r0x02
00009A 5000           00133         MOVF    r0x07, W
00009C 6E00           00134         MOVWF   r0x01
00009E 5000           00135         MOVF    r0x06, W
0000A0 6E00           00136         MOVWF   r0x00
                      00137 ; ;ic:19:       iTemp9 [k14 lr9:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x04 r0x05 ] = iTemp9 [k14 lr9:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x04 r0x05 ] - 0x1 {const-unsigned-char literal}
                      00138 ;       .line   41; string/memchrpgm.c  --count;
0000A2 0EFF           00139         MOVLW   0xff
0000A4 2600           00140         ADDWF   r0x04, F
0000A6 2200           00141         ADDWFC  r0x05, F
                      00142 ; ;ic:20:        goto _whilecontinue_0($4)
0000A8 D000           00143         BRA     _00108_DS_
                      00144 ; ;ic:21:  _whilebreak_0($6) :
                      00145 ; ;ic:22:       if iTemp9 [k14 lr9:22 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int fixed}[r0x04 r0x05 ] == 0 goto _iffalse_1($8)
0000AA                00146 _00110_DS_:
                      00147 ;       .line   44; string/memchrpgm.c  if (count)
0000AA 5000           00148         MOVF    r0x04, W
0000AC 1000           00149         IORWF   r0x05, W
0000AE E000           00150         BZ      _00112_DS_
                      00151 ; ;ic:23:       ret iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{const-void code* fixed}{ sir@ _memchrpgm_s_1_28}[r0x00 r0x01 r0x02 ]
                      00152 ;       .line   45; string/memchrpgm.c  return s;
0000B0 C000 FFF4      00153         MOVFF   r0x02, PRODH
0000B4 C000 FFF3      00154         MOVFF   r0x01, PRODL
0000B8 5000           00155         MOVF    r0x00, W
0000BA D000           00156         BRA     _00114_DS_
                      00157 ; ;ic:24:  _iffalse_1($8) :
                      00158 ; ;ic:25:       ret 0x0 {const-void code* literal}
0000BC                00159 _00112_DS_:
gpasm-0.14.1 (Aug 18 2017)   memchrpgm.asm      8-18-2017  19:22:04          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00160 ;       .line   47; string/memchrpgm.c  return NULL;
0000BC 6AF4           00161         CLRF    PRODH
0000BE 6AF3           00162         CLRF    PRODL
0000C0 6AE8           00163         CLRF    WREG
                      00164 ; ;ic:26:  _return($10) :
                      00165 ; ;ic:27:       eproc _memchrpgm [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{void code* function ( const-void code* fixed, char fixed, unsigned-int fixed) code}
0000C2                00166 _00114_DS_:
0000C2 CFE4 F000      00167         MOVFF   PREINC1, r0x09
0000C6 CFE4 F000      00168         MOVFF   PREINC1, r0x08
0000CA CFE4 F000      00169         MOVFF   PREINC1, r0x07
0000CE CFE4 F000      00170         MOVFF   PREINC1, r0x06
0000D2 CFE4 F000      00171         MOVFF   PREINC1, r0x05
0000D6 CFE4 F000      00172         MOVFF   PREINC1, r0x04
0000DA CFE4 F000      00173         MOVFF   PREINC1, r0x03
0000DE CFE4 F000      00174         MOVFF   PREINC1, r0x02
0000E2 CFE4 F000      00175         MOVFF   PREINC1, r0x01
0000E6 CFE4 F000      00176         MOVFF   PREINC1, r0x00
0000EA CFE4 FFD9      00177         MOVFF   PREINC1, FSR2L
0000EE 0012           00178         RETURN  
                      00179 
                      00180 
                      00181 
                      00182 ; Statistics:
                      00183 ; code size:      240 (0x00f0) bytes ( 0.18%)
                      00184 ;                 120 (0x0078) words
                      00185 ; udata size:       0 (0x0000) bytes ( 0.00%)
                      00186 ; access size:     10 (0x000a) bytes
                      00187 
                      00188 
                      00189         end
gpasm-0.14.1 (Aug 18 2017)   memchrpgm.asm      8-18-2017  19:22:04          PAGE  5


SYMBOL TABLE
  LABEL                             VALUE

FSR1L                             00000FE1
FSR2L                             00000FD9
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
TABLAT                            00000FF5
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
WREG                              00000FE8
_00108_DS_                        00000062
_00110_DS_                        000000AA
_00112_DS_                        000000BC
_00114_DS_                        000000C2
__18F452                          00000001
_memchrpgm                        00000000
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

